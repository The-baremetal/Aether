// Code generated from Lua_grammar_antlr4.g4 by ANTLR 4.13.2. DO NOT EDIT.

package parser // Lua_grammar_antlr4

import (
	"fmt"
	"strconv"
	"sync"

	"github.com/antlr4-go/antlr/v4"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = strconv.Itoa
var _ = sync.Once{}

type Lua_grammar_antlr4Parser struct {
	*antlr.BaseParser
}

var Lua_grammar_antlr4ParserStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func lua_grammar_antlr4ParserInit() {
	staticData := &Lua_grammar_antlr4ParserStaticData
	staticData.LiteralNames = []string{
		"", "'spawn'", "'match'", "'with'", "'end'", "'async'", "'await'", "'!!'",
		"'('", "')'", "':'", "'.'", "'['", "']'", "'?.'", "'?['", "','", "'{'",
		"'}'", "'__metatable'", "'='", "'::'", "'when'", "'=>'", "'|'", "'__add'",
		"'__sub'", "'__mul'", "'__div'", "'__mod'", "'__pow'", "'__unm'", "'__concat'",
		"'__len'", "'__eq'", "'__lt'", "'__le'", "'__tostring'", "'__pairs'",
		"'__ipairs'", "'__call'", "'#'", "'if'", "'then'", "'elseif'", "'else'",
		"'while'", "'do'", "'repeat'", "'until'", "'for'", "'in'", "'break'",
		"'goto'", "'coroutine'", "'create'", "'resume'", "'yield'", "'status'",
		"'running'", "'wrap'", "'isyieldable'", "'pcall'", "'xpcall'", "'local'",
		"'function'", "'return'", "'and'", "'or'", "'=='", "'>='", "'<='", "'~='",
		"'>'", "'<'", "'+'", "'-'", "'*'", "'/'", "'//'", "'%'", "'^'", "'&'",
		"'~'", "'<<'", "'>>'", "'+='", "'-='", "'*='", "'/='", "'//='", "'^='",
		"'&='", "'|='", "'not'", "'typeof'", "'..'", "'...'", "'..='", "'??='",
		"'+_='", "'-_='", "'+_'", "'-_'", "'??'", "'<<='", "'>>='", "'select'",
		"'number'", "'string'", "'boolean'", "'table'", "'any'", "'[]'", "'table<'",
		"'|>'", "'@'", "", "", "'nil'",
	}
	staticData.SymbolicNames = []string{
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "IDENTIFIER",
		"BOOL", "NIL", "NUMBER", "STRING", "WS", "COMMENT",
	}
	staticData.RuleNames = []string{
		"program", "statement", "assignStatement", "expression", "primaryExpression",
		"callChain", "literal", "variable", "safeAccess", "functionCall", "tableConstructor",
		"metatable", "metamethods", "labelStatement", "matchArm", "pattern",
		"fieldPattern", "metamethod", "field", "binaryOperation", "unaryOperation",
		"controlFlowStatement", "ifStatement", "whileStatement", "repeatStatement",
		"forStatement", "breakStatement", "gotoStatement", "coroutineStatement",
		"protectedCallStatement", "namedArgs", "block", "localDeclaration",
		"functionDeclaration", "returnStatement", "operatorGroup", "logicalOp",
		"comparisonOp", "arithOp", "bitwiseOp", "assignOp", "unaryOp", "concatOp",
		"varargOp", "compoundAssignOp", "incrOp", "coalesceOp", "shiftAssignOp",
		"nonNullAssertOp", "identifierList", "expressionList", "functionExpression",
		"selectStatement", "lambdaExpression", "typeAnnotation", "typeSpec",
		"experimentalExpression", "safeNavigation", "pipeOperator", "decoratorSyntax",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 1, 123, 784, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7,
		4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7,
		10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15,
		2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2,
		21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26,
		7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7,
		31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7, 36,
		2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41, 2,
		42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2, 47,
		7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52, 7,
		52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7, 57,
		2, 58, 7, 58, 2, 59, 7, 59, 1, 0, 5, 0, 122, 8, 0, 10, 0, 12, 0, 125, 9,
		0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
		1, 138, 8, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 2, 145, 8, 2, 1, 2, 1, 2,
		1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 5, 3, 154, 8, 3, 10, 3, 12, 3, 157, 9, 3,
		1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 4, 3, 166, 8, 3, 11, 3, 12, 3,
		167, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 3, 3, 178, 8, 3, 1,
		3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 5, 3, 190, 8,
		3, 10, 3, 12, 3, 193, 9, 3, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1,
		4, 1, 4, 1, 4, 1, 4, 3, 4, 206, 8, 4, 1, 4, 5, 4, 209, 8, 4, 10, 4, 12,
		4, 212, 9, 4, 1, 5, 1, 5, 1, 5, 1, 5, 3, 5, 218, 8, 5, 1, 5, 1, 5, 1, 5,
		1, 5, 1, 5, 1, 5, 1, 5, 3, 5, 227, 8, 5, 1, 6, 1, 6, 1, 7, 1, 7, 1, 7,
		1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 5, 7, 244,
		8, 7, 10, 7, 12, 7, 247, 9, 7, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 3, 8,
		255, 8, 8, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 5, 9, 262, 8, 9, 10, 9, 12, 9,
		265, 9, 9, 3, 9, 267, 8, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1,
		9, 1, 9, 5, 9, 278, 8, 9, 10, 9, 12, 9, 281, 9, 9, 3, 9, 283, 8, 9, 1,
		9, 1, 9, 3, 9, 287, 8, 9, 1, 10, 1, 10, 1, 10, 1, 10, 5, 10, 293, 8, 10,
		10, 10, 12, 10, 296, 9, 10, 3, 10, 298, 8, 10, 1, 10, 1, 10, 3, 10, 302,
		8, 10, 1, 10, 1, 10, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 3,
		11, 313, 8, 11, 1, 12, 1, 12, 1, 12, 5, 12, 318, 8, 12, 10, 12, 12, 12,
		321, 9, 12, 1, 13, 1, 13, 1, 13, 1, 13, 1, 14, 1, 14, 1, 14, 3, 14, 330,
		8, 14, 1, 14, 1, 14, 1, 14, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1,
		15, 1, 15, 5, 15, 343, 8, 15, 10, 15, 12, 15, 346, 9, 15, 1, 15, 1, 15,
		3, 15, 350, 8, 15, 1, 15, 1, 15, 1, 15, 5, 15, 355, 8, 15, 10, 15, 12,
		15, 358, 9, 15, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16,
		1, 16, 1, 16, 3, 16, 370, 8, 16, 1, 17, 1, 17, 1, 18, 1, 18, 1, 18, 1,
		18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 3, 18,
		387, 8, 18, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1,
		19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19,
		1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1,
		19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 3, 19, 425, 8, 19, 1, 20,
		1, 20, 1, 20, 1, 20, 1, 20, 3, 20, 432, 8, 20, 1, 21, 1, 21, 1, 21, 1,
		21, 1, 21, 1, 21, 1, 21, 1, 21, 3, 21, 442, 8, 21, 1, 22, 1, 22, 1, 22,
		1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 5, 22, 453, 8, 22, 10, 22, 12,
		22, 456, 9, 22, 1, 22, 1, 22, 3, 22, 460, 8, 22, 1, 22, 1, 22, 1, 23, 1,
		23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 25,
		1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 3, 25, 483, 8, 25, 1,
		25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25,
		1, 25, 3, 25, 497, 8, 25, 1, 26, 1, 26, 1, 27, 1, 27, 1, 27, 1, 28, 1,
		28, 1, 28, 1, 28, 1, 29, 1, 29, 3, 29, 510, 8, 29, 1, 29, 3, 29, 513, 8,
		29, 1, 29, 1, 29, 1, 29, 3, 29, 518, 8, 29, 1, 29, 1, 29, 1, 30, 1, 30,
		1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 5, 30, 529, 8, 30, 10, 30, 12, 30, 532,
		9, 30, 1, 31, 5, 31, 535, 8, 31, 10, 31, 12, 31, 538, 9, 31, 1, 32, 1,
		32, 3, 32, 542, 8, 32, 1, 32, 1, 32, 1, 32, 3, 32, 547, 8, 32, 1, 32, 1,
		32, 1, 32, 1, 32, 5, 32, 553, 8, 32, 10, 32, 12, 32, 556, 9, 32, 1, 32,
		1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 5, 32, 567, 8,
		32, 10, 32, 12, 32, 570, 9, 32, 3, 32, 572, 8, 32, 1, 32, 1, 32, 1, 32,
		1, 32, 3, 32, 578, 8, 32, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 3, 33, 585,
		8, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 5, 33, 592, 8, 33, 10, 33, 12,
		33, 595, 9, 33, 1, 33, 1, 33, 3, 33, 599, 8, 33, 1, 33, 3, 33, 602, 8,
		33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 34, 1, 34, 1, 34, 1, 34, 5, 34, 612,
		8, 34, 10, 34, 12, 34, 615, 9, 34, 1, 34, 3, 34, 618, 8, 34, 1, 35, 1,
		35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35,
		1, 35, 1, 35, 3, 35, 634, 8, 35, 1, 36, 1, 36, 1, 37, 1, 37, 1, 38, 1,
		38, 1, 39, 1, 39, 1, 40, 1, 40, 1, 41, 1, 41, 1, 42, 1, 42, 1, 43, 1, 43,
		1, 44, 1, 44, 1, 45, 1, 45, 1, 46, 1, 46, 1, 47, 1, 47, 1, 48, 1, 48, 1,
		49, 1, 49, 1, 49, 5, 49, 665, 8, 49, 10, 49, 12, 49, 668, 9, 49, 1, 50,
		1, 50, 1, 50, 5, 50, 673, 8, 50, 10, 50, 12, 50, 676, 9, 50, 1, 50, 3,
		50, 679, 8, 50, 1, 51, 1, 51, 1, 51, 3, 51, 684, 8, 51, 1, 51, 1, 51, 1,
		51, 1, 51, 5, 51, 690, 8, 51, 10, 51, 12, 51, 693, 9, 51, 3, 51, 695, 8,
		51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 3, 51, 703, 8, 51, 1, 52,
		1, 52, 1, 52, 1, 52, 3, 52, 709, 8, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1,
		53, 1, 53, 1, 53, 1, 53, 5, 53, 719, 8, 53, 10, 53, 12, 53, 722, 9, 53,
		3, 53, 724, 8, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 54, 1, 54, 1, 54, 1,
		55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55,
		1, 55, 1, 55, 3, 55, 746, 8, 55, 1, 55, 1, 55, 5, 55, 750, 8, 55, 10, 55,
		12, 55, 753, 9, 55, 1, 56, 1, 56, 1, 56, 3, 56, 758, 8, 56, 1, 57, 1, 57,
		1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 3, 57, 769, 8, 57, 1,
		58, 1, 58, 1, 58, 1, 58, 1, 59, 1, 59, 1, 59, 1, 59, 3, 59, 779, 8, 59,
		1, 59, 3, 59, 782, 8, 59, 1, 59, 0, 4, 6, 14, 30, 110, 60, 0, 2, 4, 6,
		8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42,
		44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78,
		80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112,
		114, 116, 118, 0, 14, 1, 0, 118, 121, 1, 0, 25, 40, 1, 0, 55, 61, 1, 0,
		62, 63, 1, 0, 10, 11, 1, 0, 67, 68, 1, 0, 69, 74, 1, 0, 75, 81, 2, 0, 24,
		24, 82, 85, 2, 0, 20, 20, 86, 93, 4, 0, 41, 41, 76, 76, 83, 83, 94, 95,
		2, 0, 86, 91, 98, 101, 1, 0, 102, 103, 1, 0, 105, 106, 855, 0, 123, 1,
		0, 0, 0, 2, 137, 1, 0, 0, 0, 4, 139, 1, 0, 0, 0, 6, 177, 1, 0, 0, 0, 8,
		205, 1, 0, 0, 0, 10, 226, 1, 0, 0, 0, 12, 228, 1, 0, 0, 0, 14, 230, 1,
		0, 0, 0, 16, 254, 1, 0, 0, 0, 18, 286, 1, 0, 0, 0, 20, 288, 1, 0, 0, 0,
		22, 312, 1, 0, 0, 0, 24, 314, 1, 0, 0, 0, 26, 322, 1, 0, 0, 0, 28, 326,
		1, 0, 0, 0, 30, 349, 1, 0, 0, 0, 32, 369, 1, 0, 0, 0, 34, 371, 1, 0, 0,
		0, 36, 386, 1, 0, 0, 0, 38, 424, 1, 0, 0, 0, 40, 431, 1, 0, 0, 0, 42, 441,
		1, 0, 0, 0, 44, 443, 1, 0, 0, 0, 46, 463, 1, 0, 0, 0, 48, 469, 1, 0, 0,
		0, 50, 496, 1, 0, 0, 0, 52, 498, 1, 0, 0, 0, 54, 500, 1, 0, 0, 0, 56, 503,
		1, 0, 0, 0, 58, 507, 1, 0, 0, 0, 60, 521, 1, 0, 0, 0, 62, 536, 1, 0, 0,
		0, 64, 577, 1, 0, 0, 0, 66, 579, 1, 0, 0, 0, 68, 607, 1, 0, 0, 0, 70, 633,
		1, 0, 0, 0, 72, 635, 1, 0, 0, 0, 74, 637, 1, 0, 0, 0, 76, 639, 1, 0, 0,
		0, 78, 641, 1, 0, 0, 0, 80, 643, 1, 0, 0, 0, 82, 645, 1, 0, 0, 0, 84, 647,
		1, 0, 0, 0, 86, 649, 1, 0, 0, 0, 88, 651, 1, 0, 0, 0, 90, 653, 1, 0, 0,
		0, 92, 655, 1, 0, 0, 0, 94, 657, 1, 0, 0, 0, 96, 659, 1, 0, 0, 0, 98, 661,
		1, 0, 0, 0, 100, 678, 1, 0, 0, 0, 102, 680, 1, 0, 0, 0, 104, 704, 1, 0,
		0, 0, 106, 714, 1, 0, 0, 0, 108, 729, 1, 0, 0, 0, 110, 745, 1, 0, 0, 0,
		112, 757, 1, 0, 0, 0, 114, 768, 1, 0, 0, 0, 116, 770, 1, 0, 0, 0, 118,
		774, 1, 0, 0, 0, 120, 122, 3, 2, 1, 0, 121, 120, 1, 0, 0, 0, 122, 125,
		1, 0, 0, 0, 123, 121, 1, 0, 0, 0, 123, 124, 1, 0, 0, 0, 124, 126, 1, 0,
		0, 0, 125, 123, 1, 0, 0, 0, 126, 127, 5, 0, 0, 1, 127, 1, 1, 0, 0, 0, 128,
		138, 3, 4, 2, 0, 129, 138, 3, 42, 21, 0, 130, 138, 3, 66, 33, 0, 131, 138,
		3, 68, 34, 0, 132, 138, 3, 64, 32, 0, 133, 138, 3, 26, 13, 0, 134, 138,
		3, 104, 52, 0, 135, 136, 5, 1, 0, 0, 136, 138, 3, 6, 3, 0, 137, 128, 1,
		0, 0, 0, 137, 129, 1, 0, 0, 0, 137, 130, 1, 0, 0, 0, 137, 131, 1, 0, 0,
		0, 137, 132, 1, 0, 0, 0, 137, 133, 1, 0, 0, 0, 137, 134, 1, 0, 0, 0, 137,
		135, 1, 0, 0, 0, 138, 3, 1, 0, 0, 0, 139, 144, 3, 14, 7, 0, 140, 145, 3,
		80, 40, 0, 141, 145, 3, 90, 45, 0, 142, 145, 3, 94, 47, 0, 143, 145, 3,
		92, 46, 0, 144, 140, 1, 0, 0, 0, 144, 141, 1, 0, 0, 0, 144, 142, 1, 0,
		0, 0, 144, 143, 1, 0, 0, 0, 145, 146, 1, 0, 0, 0, 146, 147, 3, 6, 3, 0,
		147, 5, 1, 0, 0, 0, 148, 149, 6, 3, -1, 0, 149, 155, 3, 8, 4, 0, 150, 151,
		3, 70, 35, 0, 151, 152, 3, 6, 3, 0, 152, 154, 1, 0, 0, 0, 153, 150, 1,
		0, 0, 0, 154, 157, 1, 0, 0, 0, 155, 153, 1, 0, 0, 0, 155, 156, 1, 0, 0,
		0, 156, 178, 1, 0, 0, 0, 157, 155, 1, 0, 0, 0, 158, 159, 3, 82, 41, 0,
		159, 160, 3, 6, 3, 5, 160, 178, 1, 0, 0, 0, 161, 162, 5, 2, 0, 0, 162,
		163, 3, 6, 3, 0, 163, 165, 5, 3, 0, 0, 164, 166, 3, 28, 14, 0, 165, 164,
		1, 0, 0, 0, 166, 167, 1, 0, 0, 0, 167, 165, 1, 0, 0, 0, 167, 168, 1, 0,
		0, 0, 168, 169, 1, 0, 0, 0, 169, 170, 5, 4, 0, 0, 170, 178, 1, 0, 0, 0,
		171, 172, 5, 5, 0, 0, 172, 173, 3, 62, 31, 0, 173, 174, 5, 4, 0, 0, 174,
		178, 1, 0, 0, 0, 175, 176, 5, 6, 0, 0, 176, 178, 3, 6, 3, 2, 177, 148,
		1, 0, 0, 0, 177, 158, 1, 0, 0, 0, 177, 161, 1, 0, 0, 0, 177, 171, 1, 0,
		0, 0, 177, 175, 1, 0, 0, 0, 178, 191, 1, 0, 0, 0, 179, 180, 10, 7, 0, 0,
		180, 181, 3, 70, 35, 0, 181, 182, 3, 6, 3, 8, 182, 190, 1, 0, 0, 0, 183,
		184, 10, 6, 0, 0, 184, 185, 3, 70, 35, 0, 185, 186, 3, 6, 3, 6, 186, 190,
		1, 0, 0, 0, 187, 188, 10, 1, 0, 0, 188, 190, 5, 7, 0, 0, 189, 179, 1, 0,
		0, 0, 189, 183, 1, 0, 0, 0, 189, 187, 1, 0, 0, 0, 190, 193, 1, 0, 0, 0,
		191, 189, 1, 0, 0, 0, 191, 192, 1, 0, 0, 0, 192, 7, 1, 0, 0, 0, 193, 191,
		1, 0, 0, 0, 194, 206, 3, 12, 6, 0, 195, 206, 3, 14, 7, 0, 196, 206, 3,
		18, 9, 0, 197, 206, 3, 40, 20, 0, 198, 206, 3, 20, 10, 0, 199, 206, 3,
		102, 51, 0, 200, 201, 5, 8, 0, 0, 201, 202, 3, 6, 3, 0, 202, 203, 5, 9,
		0, 0, 203, 206, 1, 0, 0, 0, 204, 206, 3, 106, 53, 0, 205, 194, 1, 0, 0,
		0, 205, 195, 1, 0, 0, 0, 205, 196, 1, 0, 0, 0, 205, 197, 1, 0, 0, 0, 205,
		198, 1, 0, 0, 0, 205, 199, 1, 0, 0, 0, 205, 200, 1, 0, 0, 0, 205, 204,
		1, 0, 0, 0, 206, 210, 1, 0, 0, 0, 207, 209, 3, 10, 5, 0, 208, 207, 1, 0,
		0, 0, 209, 212, 1, 0, 0, 0, 210, 208, 1, 0, 0, 0, 210, 211, 1, 0, 0, 0,
		211, 9, 1, 0, 0, 0, 212, 210, 1, 0, 0, 0, 213, 214, 5, 10, 0, 0, 214, 215,
		5, 117, 0, 0, 215, 217, 5, 8, 0, 0, 216, 218, 3, 100, 50, 0, 217, 216,
		1, 0, 0, 0, 217, 218, 1, 0, 0, 0, 218, 219, 1, 0, 0, 0, 219, 227, 5, 9,
		0, 0, 220, 221, 5, 11, 0, 0, 221, 227, 5, 117, 0, 0, 222, 223, 5, 12, 0,
		0, 223, 224, 3, 6, 3, 0, 224, 225, 5, 13, 0, 0, 225, 227, 1, 0, 0, 0, 226,
		213, 1, 0, 0, 0, 226, 220, 1, 0, 0, 0, 226, 222, 1, 0, 0, 0, 227, 11, 1,
		0, 0, 0, 228, 229, 7, 0, 0, 0, 229, 13, 1, 0, 0, 0, 230, 231, 6, 7, -1,
		0, 231, 232, 5, 117, 0, 0, 232, 245, 1, 0, 0, 0, 233, 234, 10, 3, 0, 0,
		234, 244, 3, 16, 8, 0, 235, 236, 10, 2, 0, 0, 236, 237, 5, 12, 0, 0, 237,
		238, 3, 6, 3, 0, 238, 239, 5, 13, 0, 0, 239, 244, 1, 0, 0, 0, 240, 241,
		10, 1, 0, 0, 241, 242, 5, 11, 0, 0, 242, 244, 5, 117, 0, 0, 243, 233, 1,
		0, 0, 0, 243, 235, 1, 0, 0, 0, 243, 240, 1, 0, 0, 0, 244, 247, 1, 0, 0,
		0, 245, 243, 1, 0, 0, 0, 245, 246, 1, 0, 0, 0, 246, 15, 1, 0, 0, 0, 247,
		245, 1, 0, 0, 0, 248, 249, 5, 14, 0, 0, 249, 255, 5, 117, 0, 0, 250, 251,
		5, 15, 0, 0, 251, 252, 3, 6, 3, 0, 252, 253, 5, 13, 0, 0, 253, 255, 1,
		0, 0, 0, 254, 248, 1, 0, 0, 0, 254, 250, 1, 0, 0, 0, 255, 17, 1, 0, 0,
		0, 256, 257, 3, 14, 7, 0, 257, 266, 5, 8, 0, 0, 258, 263, 3, 6, 3, 0, 259,
		260, 5, 16, 0, 0, 260, 262, 3, 6, 3, 0, 261, 259, 1, 0, 0, 0, 262, 265,
		1, 0, 0, 0, 263, 261, 1, 0, 0, 0, 263, 264, 1, 0, 0, 0, 264, 267, 1, 0,
		0, 0, 265, 263, 1, 0, 0, 0, 266, 258, 1, 0, 0, 0, 266, 267, 1, 0, 0, 0,
		267, 268, 1, 0, 0, 0, 268, 269, 5, 9, 0, 0, 269, 287, 1, 0, 0, 0, 270,
		271, 3, 14, 7, 0, 271, 272, 5, 10, 0, 0, 272, 273, 5, 117, 0, 0, 273, 282,
		5, 8, 0, 0, 274, 279, 3, 6, 3, 0, 275, 276, 5, 16, 0, 0, 276, 278, 3, 6,
		3, 0, 277, 275, 1, 0, 0, 0, 278, 281, 1, 0, 0, 0, 279, 277, 1, 0, 0, 0,
		279, 280, 1, 0, 0, 0, 280, 283, 1, 0, 0, 0, 281, 279, 1, 0, 0, 0, 282,
		274, 1, 0, 0, 0, 282, 283, 1, 0, 0, 0, 283, 284, 1, 0, 0, 0, 284, 285,
		5, 9, 0, 0, 285, 287, 1, 0, 0, 0, 286, 256, 1, 0, 0, 0, 286, 270, 1, 0,
		0, 0, 287, 19, 1, 0, 0, 0, 288, 297, 5, 17, 0, 0, 289, 294, 3, 36, 18,
		0, 290, 291, 5, 16, 0, 0, 291, 293, 3, 36, 18, 0, 292, 290, 1, 0, 0, 0,
		293, 296, 1, 0, 0, 0, 294, 292, 1, 0, 0, 0, 294, 295, 1, 0, 0, 0, 295,
		298, 1, 0, 0, 0, 296, 294, 1, 0, 0, 0, 297, 289, 1, 0, 0, 0, 297, 298,
		1, 0, 0, 0, 298, 301, 1, 0, 0, 0, 299, 300, 5, 16, 0, 0, 300, 302, 3, 22,
		11, 0, 301, 299, 1, 0, 0, 0, 301, 302, 1, 0, 0, 0, 302, 303, 1, 0, 0, 0,
		303, 304, 5, 18, 0, 0, 304, 21, 1, 0, 0, 0, 305, 306, 5, 19, 0, 0, 306,
		307, 5, 20, 0, 0, 307, 313, 3, 6, 3, 0, 308, 309, 5, 17, 0, 0, 309, 310,
		3, 24, 12, 0, 310, 311, 5, 18, 0, 0, 311, 313, 1, 0, 0, 0, 312, 305, 1,
		0, 0, 0, 312, 308, 1, 0, 0, 0, 313, 23, 1, 0, 0, 0, 314, 319, 3, 34, 17,
		0, 315, 316, 5, 16, 0, 0, 316, 318, 3, 34, 17, 0, 317, 315, 1, 0, 0, 0,
		318, 321, 1, 0, 0, 0, 319, 317, 1, 0, 0, 0, 319, 320, 1, 0, 0, 0, 320,
		25, 1, 0, 0, 0, 321, 319, 1, 0, 0, 0, 322, 323, 5, 21, 0, 0, 323, 324,
		5, 117, 0, 0, 324, 325, 5, 21, 0, 0, 325, 27, 1, 0, 0, 0, 326, 329, 3,
		30, 15, 0, 327, 328, 5, 22, 0, 0, 328, 330, 3, 6, 3, 0, 329, 327, 1, 0,
		0, 0, 329, 330, 1, 0, 0, 0, 330, 331, 1, 0, 0, 0, 331, 332, 5, 23, 0, 0,
		332, 333, 3, 6, 3, 0, 333, 29, 1, 0, 0, 0, 334, 335, 6, 15, -1, 0, 335,
		350, 3, 12, 6, 0, 336, 350, 3, 20, 10, 0, 337, 350, 5, 117, 0, 0, 338,
		339, 5, 17, 0, 0, 339, 344, 3, 32, 16, 0, 340, 341, 5, 16, 0, 0, 341, 343,
		3, 32, 16, 0, 342, 340, 1, 0, 0, 0, 343, 346, 1, 0, 0, 0, 344, 342, 1,
		0, 0, 0, 344, 345, 1, 0, 0, 0, 345, 347, 1, 0, 0, 0, 346, 344, 1, 0, 0,
		0, 347, 348, 5, 18, 0, 0, 348, 350, 1, 0, 0, 0, 349, 334, 1, 0, 0, 0, 349,
		336, 1, 0, 0, 0, 349, 337, 1, 0, 0, 0, 349, 338, 1, 0, 0, 0, 350, 356,
		1, 0, 0, 0, 351, 352, 10, 2, 0, 0, 352, 353, 5, 24, 0, 0, 353, 355, 3,
		30, 15, 3, 354, 351, 1, 0, 0, 0, 355, 358, 1, 0, 0, 0, 356, 354, 1, 0,
		0, 0, 356, 357, 1, 0, 0, 0, 357, 31, 1, 0, 0, 0, 358, 356, 1, 0, 0, 0,
		359, 360, 5, 117, 0, 0, 360, 361, 5, 20, 0, 0, 361, 370, 3, 30, 15, 0,
		362, 363, 5, 12, 0, 0, 363, 364, 3, 6, 3, 0, 364, 365, 5, 13, 0, 0, 365,
		366, 5, 20, 0, 0, 366, 367, 3, 30, 15, 0, 367, 370, 1, 0, 0, 0, 368, 370,
		3, 30, 15, 0, 369, 359, 1, 0, 0, 0, 369, 362, 1, 0, 0, 0, 369, 368, 1,
		0, 0, 0, 370, 33, 1, 0, 0, 0, 371, 372, 7, 1, 0, 0, 372, 35, 1, 0, 0, 0,
		373, 374, 5, 117, 0, 0, 374, 375, 5, 20, 0, 0, 375, 387, 3, 6, 3, 0, 376,
		377, 5, 12, 0, 0, 377, 378, 3, 6, 3, 0, 378, 379, 5, 13, 0, 0, 379, 380,
		5, 20, 0, 0, 380, 381, 3, 6, 3, 0, 381, 387, 1, 0, 0, 0, 382, 387, 3, 6,
		3, 0, 383, 384, 5, 117, 0, 0, 384, 385, 5, 10, 0, 0, 385, 387, 3, 102,
		51, 0, 386, 373, 1, 0, 0, 0, 386, 376, 1, 0, 0, 0, 386, 382, 1, 0, 0, 0,
		386, 383, 1, 0, 0, 0, 387, 37, 1, 0, 0, 0, 388, 389, 3, 6, 3, 0, 389, 390,
		3, 76, 38, 0, 390, 391, 3, 6, 3, 0, 391, 425, 1, 0, 0, 0, 392, 393, 3,
		6, 3, 0, 393, 394, 3, 78, 39, 0, 394, 395, 3, 6, 3, 0, 395, 425, 1, 0,
		0, 0, 396, 397, 3, 6, 3, 0, 397, 398, 3, 74, 37, 0, 398, 399, 3, 6, 3,
		0, 399, 425, 1, 0, 0, 0, 400, 401, 3, 6, 3, 0, 401, 402, 3, 72, 36, 0,
		402, 403, 3, 6, 3, 0, 403, 425, 1, 0, 0, 0, 404, 405, 3, 6, 3, 0, 405,
		406, 3, 84, 42, 0, 406, 407, 3, 6, 3, 0, 407, 425, 1, 0, 0, 0, 408, 409,
		3, 6, 3, 0, 409, 410, 3, 88, 44, 0, 410, 411, 3, 6, 3, 0, 411, 425, 1,
		0, 0, 0, 412, 413, 3, 6, 3, 0, 413, 414, 3, 92, 46, 0, 414, 415, 3, 6,
		3, 0, 415, 425, 1, 0, 0, 0, 416, 417, 3, 6, 3, 0, 417, 418, 3, 94, 47,
		0, 418, 419, 3, 6, 3, 0, 419, 425, 1, 0, 0, 0, 420, 421, 3, 6, 3, 0, 421,
		422, 3, 90, 45, 0, 422, 423, 3, 6, 3, 0, 423, 425, 1, 0, 0, 0, 424, 388,
		1, 0, 0, 0, 424, 392, 1, 0, 0, 0, 424, 396, 1, 0, 0, 0, 424, 400, 1, 0,
		0, 0, 424, 404, 1, 0, 0, 0, 424, 408, 1, 0, 0, 0, 424, 412, 1, 0, 0, 0,
		424, 416, 1, 0, 0, 0, 424, 420, 1, 0, 0, 0, 425, 39, 1, 0, 0, 0, 426, 427,
		3, 82, 41, 0, 427, 428, 3, 6, 3, 0, 428, 432, 1, 0, 0, 0, 429, 430, 5,
		41, 0, 0, 430, 432, 3, 6, 3, 0, 431, 426, 1, 0, 0, 0, 431, 429, 1, 0, 0,
		0, 432, 41, 1, 0, 0, 0, 433, 442, 3, 44, 22, 0, 434, 442, 3, 46, 23, 0,
		435, 442, 3, 48, 24, 0, 436, 442, 3, 50, 25, 0, 437, 442, 3, 52, 26, 0,
		438, 442, 3, 54, 27, 0, 439, 442, 3, 56, 28, 0, 440, 442, 3, 58, 29, 0,
		441, 433, 1, 0, 0, 0, 441, 434, 1, 0, 0, 0, 441, 435, 1, 0, 0, 0, 441,
		436, 1, 0, 0, 0, 441, 437, 1, 0, 0, 0, 441, 438, 1, 0, 0, 0, 441, 439,
		1, 0, 0, 0, 441, 440, 1, 0, 0, 0, 442, 43, 1, 0, 0, 0, 443, 444, 5, 42,
		0, 0, 444, 445, 3, 6, 3, 0, 445, 446, 5, 43, 0, 0, 446, 454, 3, 62, 31,
		0, 447, 448, 5, 44, 0, 0, 448, 449, 3, 6, 3, 0, 449, 450, 5, 43, 0, 0,
		450, 451, 3, 62, 31, 0, 451, 453, 1, 0, 0, 0, 452, 447, 1, 0, 0, 0, 453,
		456, 1, 0, 0, 0, 454, 452, 1, 0, 0, 0, 454, 455, 1, 0, 0, 0, 455, 459,
		1, 0, 0, 0, 456, 454, 1, 0, 0, 0, 457, 458, 5, 45, 0, 0, 458, 460, 3, 62,
		31, 0, 459, 457, 1, 0, 0, 0, 459, 460, 1, 0, 0, 0, 460, 461, 1, 0, 0, 0,
		461, 462, 5, 4, 0, 0, 462, 45, 1, 0, 0, 0, 463, 464, 5, 46, 0, 0, 464,
		465, 3, 6, 3, 0, 465, 466, 5, 47, 0, 0, 466, 467, 3, 62, 31, 0, 467, 468,
		5, 4, 0, 0, 468, 47, 1, 0, 0, 0, 469, 470, 5, 48, 0, 0, 470, 471, 3, 62,
		31, 0, 471, 472, 5, 49, 0, 0, 472, 473, 3, 6, 3, 0, 473, 49, 1, 0, 0, 0,
		474, 475, 5, 50, 0, 0, 475, 476, 5, 117, 0, 0, 476, 477, 5, 20, 0, 0, 477,
		478, 3, 6, 3, 0, 478, 479, 5, 16, 0, 0, 479, 482, 3, 6, 3, 0, 480, 481,
		5, 16, 0, 0, 481, 483, 3, 6, 3, 0, 482, 480, 1, 0, 0, 0, 482, 483, 1, 0,
		0, 0, 483, 484, 1, 0, 0, 0, 484, 485, 5, 47, 0, 0, 485, 486, 3, 62, 31,
		0, 486, 487, 5, 4, 0, 0, 487, 497, 1, 0, 0, 0, 488, 489, 5, 50, 0, 0, 489,
		490, 3, 98, 49, 0, 490, 491, 5, 51, 0, 0, 491, 492, 3, 100, 50, 0, 492,
		493, 5, 47, 0, 0, 493, 494, 3, 62, 31, 0, 494, 495, 5, 4, 0, 0, 495, 497,
		1, 0, 0, 0, 496, 474, 1, 0, 0, 0, 496, 488, 1, 0, 0, 0, 497, 51, 1, 0,
		0, 0, 498, 499, 5, 52, 0, 0, 499, 53, 1, 0, 0, 0, 500, 501, 5, 53, 0, 0,
		501, 502, 5, 117, 0, 0, 502, 55, 1, 0, 0, 0, 503, 504, 5, 54, 0, 0, 504,
		505, 5, 11, 0, 0, 505, 506, 7, 2, 0, 0, 506, 57, 1, 0, 0, 0, 507, 509,
		7, 3, 0, 0, 508, 510, 7, 4, 0, 0, 509, 508, 1, 0, 0, 0, 509, 510, 1, 0,
		0, 0, 510, 512, 1, 0, 0, 0, 511, 513, 5, 117, 0, 0, 512, 511, 1, 0, 0,
		0, 512, 513, 1, 0, 0, 0, 513, 514, 1, 0, 0, 0, 514, 517, 5, 8, 0, 0, 515,
		518, 3, 100, 50, 0, 516, 518, 3, 60, 30, 0, 517, 515, 1, 0, 0, 0, 517,
		516, 1, 0, 0, 0, 518, 519, 1, 0, 0, 0, 519, 520, 5, 9, 0, 0, 520, 59, 1,
		0, 0, 0, 521, 522, 5, 117, 0, 0, 522, 523, 5, 20, 0, 0, 523, 530, 3, 6,
		3, 0, 524, 525, 5, 16, 0, 0, 525, 526, 5, 117, 0, 0, 526, 527, 5, 20, 0,
		0, 527, 529, 3, 6, 3, 0, 528, 524, 1, 0, 0, 0, 529, 532, 1, 0, 0, 0, 530,
		528, 1, 0, 0, 0, 530, 531, 1, 0, 0, 0, 531, 61, 1, 0, 0, 0, 532, 530, 1,
		0, 0, 0, 533, 535, 3, 2, 1, 0, 534, 533, 1, 0, 0, 0, 535, 538, 1, 0, 0,
		0, 536, 534, 1, 0, 0, 0, 536, 537, 1, 0, 0, 0, 537, 63, 1, 0, 0, 0, 538,
		536, 1, 0, 0, 0, 539, 541, 5, 64, 0, 0, 540, 542, 3, 108, 54, 0, 541, 540,
		1, 0, 0, 0, 541, 542, 1, 0, 0, 0, 542, 543, 1, 0, 0, 0, 543, 546, 5, 117,
		0, 0, 544, 545, 5, 20, 0, 0, 545, 547, 3, 6, 3, 0, 546, 544, 1, 0, 0, 0,
		546, 547, 1, 0, 0, 0, 547, 578, 1, 0, 0, 0, 548, 549, 5, 64, 0, 0, 549,
		554, 5, 117, 0, 0, 550, 551, 5, 16, 0, 0, 551, 553, 5, 117, 0, 0, 552,
		550, 1, 0, 0, 0, 553, 556, 1, 0, 0, 0, 554, 552, 1, 0, 0, 0, 554, 555,
		1, 0, 0, 0, 555, 557, 1, 0, 0, 0, 556, 554, 1, 0, 0, 0, 557, 558, 5, 20,
		0, 0, 558, 578, 3, 100, 50, 0, 559, 560, 5, 64, 0, 0, 560, 561, 5, 65,
		0, 0, 561, 562, 5, 117, 0, 0, 562, 571, 5, 8, 0, 0, 563, 568, 5, 117, 0,
		0, 564, 565, 5, 16, 0, 0, 565, 567, 5, 117, 0, 0, 566, 564, 1, 0, 0, 0,
		567, 570, 1, 0, 0, 0, 568, 566, 1, 0, 0, 0, 568, 569, 1, 0, 0, 0, 569,
		572, 1, 0, 0, 0, 570, 568, 1, 0, 0, 0, 571, 563, 1, 0, 0, 0, 571, 572,
		1, 0, 0, 0, 572, 573, 1, 0, 0, 0, 573, 574, 5, 9, 0, 0, 574, 575, 3, 62,
		31, 0, 575, 576, 5, 4, 0, 0, 576, 578, 1, 0, 0, 0, 577, 539, 1, 0, 0, 0,
		577, 548, 1, 0, 0, 0, 577, 559, 1, 0, 0, 0, 578, 65, 1, 0, 0, 0, 579, 584,
		5, 65, 0, 0, 580, 581, 5, 117, 0, 0, 581, 585, 5, 11, 0, 0, 582, 583, 5,
		117, 0, 0, 583, 585, 5, 10, 0, 0, 584, 580, 1, 0, 0, 0, 584, 582, 1, 0,
		0, 0, 584, 585, 1, 0, 0, 0, 585, 586, 1, 0, 0, 0, 586, 587, 5, 117, 0,
		0, 587, 601, 5, 8, 0, 0, 588, 593, 5, 117, 0, 0, 589, 590, 5, 16, 0, 0,
		590, 592, 5, 117, 0, 0, 591, 589, 1, 0, 0, 0, 592, 595, 1, 0, 0, 0, 593,
		591, 1, 0, 0, 0, 593, 594, 1, 0, 0, 0, 594, 598, 1, 0, 0, 0, 595, 593,
		1, 0, 0, 0, 596, 597, 5, 16, 0, 0, 597, 599, 3, 86, 43, 0, 598, 596, 1,
		0, 0, 0, 598, 599, 1, 0, 0, 0, 599, 602, 1, 0, 0, 0, 600, 602, 3, 86, 43,
		0, 601, 588, 1, 0, 0, 0, 601, 600, 1, 0, 0, 0, 601, 602, 1, 0, 0, 0, 602,
		603, 1, 0, 0, 0, 603, 604, 5, 9, 0, 0, 604, 605, 3, 62, 31, 0, 605, 606,
		5, 4, 0, 0, 606, 67, 1, 0, 0, 0, 607, 617, 5, 66, 0, 0, 608, 613, 3, 6,
		3, 0, 609, 610, 5, 16, 0, 0, 610, 612, 3, 6, 3, 0, 611, 609, 1, 0, 0, 0,
		612, 615, 1, 0, 0, 0, 613, 611, 1, 0, 0, 0, 613, 614, 1, 0, 0, 0, 614,
		618, 1, 0, 0, 0, 615, 613, 1, 0, 0, 0, 616, 618, 3, 18, 9, 0, 617, 608,
		1, 0, 0, 0, 617, 616, 1, 0, 0, 0, 617, 618, 1, 0, 0, 0, 618, 69, 1, 0,
		0, 0, 619, 634, 3, 72, 36, 0, 620, 634, 3, 74, 37, 0, 621, 634, 3, 76,
		38, 0, 622, 634, 3, 78, 39, 0, 623, 634, 3, 80, 40, 0, 624, 634, 3, 82,
		41, 0, 625, 634, 3, 84, 42, 0, 626, 634, 3, 88, 44, 0, 627, 634, 3, 90,
		45, 0, 628, 634, 3, 92, 46, 0, 629, 634, 3, 94, 47, 0, 630, 634, 5, 23,
		0, 0, 631, 634, 3, 16, 8, 0, 632, 634, 3, 96, 48, 0, 633, 619, 1, 0, 0,
		0, 633, 620, 1, 0, 0, 0, 633, 621, 1, 0, 0, 0, 633, 622, 1, 0, 0, 0, 633,
		623, 1, 0, 0, 0, 633, 624, 1, 0, 0, 0, 633, 625, 1, 0, 0, 0, 633, 626,
		1, 0, 0, 0, 633, 627, 1, 0, 0, 0, 633, 628, 1, 0, 0, 0, 633, 629, 1, 0,
		0, 0, 633, 630, 1, 0, 0, 0, 633, 631, 1, 0, 0, 0, 633, 632, 1, 0, 0, 0,
		634, 71, 1, 0, 0, 0, 635, 636, 7, 5, 0, 0, 636, 73, 1, 0, 0, 0, 637, 638,
		7, 6, 0, 0, 638, 75, 1, 0, 0, 0, 639, 640, 7, 7, 0, 0, 640, 77, 1, 0, 0,
		0, 641, 642, 7, 8, 0, 0, 642, 79, 1, 0, 0, 0, 643, 644, 7, 9, 0, 0, 644,
		81, 1, 0, 0, 0, 645, 646, 7, 10, 0, 0, 646, 83, 1, 0, 0, 0, 647, 648, 5,
		96, 0, 0, 648, 85, 1, 0, 0, 0, 649, 650, 5, 97, 0, 0, 650, 87, 1, 0, 0,
		0, 651, 652, 7, 11, 0, 0, 652, 89, 1, 0, 0, 0, 653, 654, 7, 12, 0, 0, 654,
		91, 1, 0, 0, 0, 655, 656, 5, 104, 0, 0, 656, 93, 1, 0, 0, 0, 657, 658,
		7, 13, 0, 0, 658, 95, 1, 0, 0, 0, 659, 660, 5, 7, 0, 0, 660, 97, 1, 0,
		0, 0, 661, 666, 5, 117, 0, 0, 662, 663, 5, 16, 0, 0, 663, 665, 5, 117,
		0, 0, 664, 662, 1, 0, 0, 0, 665, 668, 1, 0, 0, 0, 666, 664, 1, 0, 0, 0,
		666, 667, 1, 0, 0, 0, 667, 99, 1, 0, 0, 0, 668, 666, 1, 0, 0, 0, 669, 674,
		3, 6, 3, 0, 670, 671, 5, 16, 0, 0, 671, 673, 3, 6, 3, 0, 672, 670, 1, 0,
		0, 0, 673, 676, 1, 0, 0, 0, 674, 672, 1, 0, 0, 0, 674, 675, 1, 0, 0, 0,
		675, 679, 1, 0, 0, 0, 676, 674, 1, 0, 0, 0, 677, 679, 3, 86, 43, 0, 678,
		669, 1, 0, 0, 0, 678, 677, 1, 0, 0, 0, 679, 101, 1, 0, 0, 0, 680, 683,
		5, 65, 0, 0, 681, 682, 5, 117, 0, 0, 682, 684, 5, 10, 0, 0, 683, 681, 1,
		0, 0, 0, 683, 684, 1, 0, 0, 0, 684, 685, 1, 0, 0, 0, 685, 694, 5, 8, 0,
		0, 686, 691, 5, 117, 0, 0, 687, 688, 5, 16, 0, 0, 688, 690, 5, 117, 0,
		0, 689, 687, 1, 0, 0, 0, 690, 693, 1, 0, 0, 0, 691, 689, 1, 0, 0, 0, 691,
		692, 1, 0, 0, 0, 692, 695, 1, 0, 0, 0, 693, 691, 1, 0, 0, 0, 694, 686,
		1, 0, 0, 0, 694, 695, 1, 0, 0, 0, 695, 696, 1, 0, 0, 0, 696, 702, 5, 9,
		0, 0, 697, 698, 3, 62, 31, 0, 698, 699, 5, 4, 0, 0, 699, 703, 1, 0, 0,
		0, 700, 701, 5, 23, 0, 0, 701, 703, 3, 6, 3, 0, 702, 697, 1, 0, 0, 0, 702,
		700, 1, 0, 0, 0, 703, 103, 1, 0, 0, 0, 704, 705, 5, 107, 0, 0, 705, 708,
		5, 8, 0, 0, 706, 709, 5, 41, 0, 0, 707, 709, 3, 6, 3, 0, 708, 706, 1, 0,
		0, 0, 708, 707, 1, 0, 0, 0, 709, 710, 1, 0, 0, 0, 710, 711, 5, 16, 0, 0,
		711, 712, 3, 6, 3, 0, 712, 713, 5, 9, 0, 0, 713, 105, 1, 0, 0, 0, 714,
		723, 5, 8, 0, 0, 715, 720, 5, 117, 0, 0, 716, 717, 5, 16, 0, 0, 717, 719,
		5, 117, 0, 0, 718, 716, 1, 0, 0, 0, 719, 722, 1, 0, 0, 0, 720, 718, 1,
		0, 0, 0, 720, 721, 1, 0, 0, 0, 721, 724, 1, 0, 0, 0, 722, 720, 1, 0, 0,
		0, 723, 715, 1, 0, 0, 0, 723, 724, 1, 0, 0, 0, 724, 725, 1, 0, 0, 0, 725,
		726, 5, 9, 0, 0, 726, 727, 5, 23, 0, 0, 727, 728, 3, 6, 3, 0, 728, 107,
		1, 0, 0, 0, 729, 730, 5, 10, 0, 0, 730, 731, 3, 110, 55, 0, 731, 109, 1,
		0, 0, 0, 732, 733, 6, 55, -1, 0, 733, 746, 5, 108, 0, 0, 734, 746, 5, 109,
		0, 0, 735, 746, 5, 110, 0, 0, 736, 746, 5, 111, 0, 0, 737, 746, 5, 65,
		0, 0, 738, 746, 5, 112, 0, 0, 739, 740, 5, 114, 0, 0, 740, 741, 3, 110,
		55, 0, 741, 742, 5, 16, 0, 0, 742, 743, 3, 110, 55, 0, 743, 744, 5, 73,
		0, 0, 744, 746, 1, 0, 0, 0, 745, 732, 1, 0, 0, 0, 745, 734, 1, 0, 0, 0,
		745, 735, 1, 0, 0, 0, 745, 736, 1, 0, 0, 0, 745, 737, 1, 0, 0, 0, 745,
		738, 1, 0, 0, 0, 745, 739, 1, 0, 0, 0, 746, 751, 1, 0, 0, 0, 747, 748,
		10, 2, 0, 0, 748, 750, 5, 113, 0, 0, 749, 747, 1, 0, 0, 0, 750, 753, 1,
		0, 0, 0, 751, 749, 1, 0, 0, 0, 751, 752, 1, 0, 0, 0, 752, 111, 1, 0, 0,
		0, 753, 751, 1, 0, 0, 0, 754, 758, 3, 114, 57, 0, 755, 758, 3, 116, 58,
		0, 756, 758, 3, 118, 59, 0, 757, 754, 1, 0, 0, 0, 757, 755, 1, 0, 0, 0,
		757, 756, 1, 0, 0, 0, 758, 113, 1, 0, 0, 0, 759, 760, 3, 6, 3, 0, 760,
		761, 5, 14, 0, 0, 761, 762, 5, 117, 0, 0, 762, 769, 1, 0, 0, 0, 763, 764,
		3, 6, 3, 0, 764, 765, 5, 15, 0, 0, 765, 766, 3, 6, 3, 0, 766, 767, 5, 13,
		0, 0, 767, 769, 1, 0, 0, 0, 768, 759, 1, 0, 0, 0, 768, 763, 1, 0, 0, 0,
		769, 115, 1, 0, 0, 0, 770, 771, 3, 6, 3, 0, 771, 772, 5, 115, 0, 0, 772,
		773, 3, 6, 3, 0, 773, 117, 1, 0, 0, 0, 774, 775, 5, 116, 0, 0, 775, 781,
		5, 117, 0, 0, 776, 778, 5, 8, 0, 0, 777, 779, 3, 100, 50, 0, 778, 777,
		1, 0, 0, 0, 778, 779, 1, 0, 0, 0, 779, 780, 1, 0, 0, 0, 780, 782, 5, 9,
		0, 0, 781, 776, 1, 0, 0, 0, 781, 782, 1, 0, 0, 0, 782, 119, 1, 0, 0, 0,
		72, 123, 137, 144, 155, 167, 177, 189, 191, 205, 210, 217, 226, 243, 245,
		254, 263, 266, 279, 282, 286, 294, 297, 301, 312, 319, 329, 344, 349, 356,
		369, 386, 424, 431, 441, 454, 459, 482, 496, 509, 512, 517, 530, 536, 541,
		546, 554, 568, 571, 577, 584, 593, 598, 601, 613, 617, 633, 666, 674, 678,
		683, 691, 694, 702, 708, 720, 723, 745, 751, 757, 768, 778, 781,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// Lua_grammar_antlr4ParserInit initializes any static state used to implement Lua_grammar_antlr4Parser. By default the
// static state used to implement the parser is lazily initialized during the first call to
// NewLua_grammar_antlr4Parser(). You can call this function if you wish to initialize the static state ahead
// of time.
func Lua_grammar_antlr4ParserInit() {
	staticData := &Lua_grammar_antlr4ParserStaticData
	staticData.once.Do(lua_grammar_antlr4ParserInit)
}

// NewLua_grammar_antlr4Parser produces a new parser instance for the optional input antlr.TokenStream.
func NewLua_grammar_antlr4Parser(input antlr.TokenStream) *Lua_grammar_antlr4Parser {
	Lua_grammar_antlr4ParserInit()
	this := new(Lua_grammar_antlr4Parser)
	this.BaseParser = antlr.NewBaseParser(input)
	staticData := &Lua_grammar_antlr4ParserStaticData
	this.Interpreter = antlr.NewParserATNSimulator(this, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	this.RuleNames = staticData.RuleNames
	this.LiteralNames = staticData.LiteralNames
	this.SymbolicNames = staticData.SymbolicNames
	this.GrammarFileName = "Lua_grammar_antlr4.g4"

	return this
}

// Lua_grammar_antlr4Parser tokens.
const (
	Lua_grammar_antlr4ParserEOF        = antlr.TokenEOF
	Lua_grammar_antlr4ParserT__0       = 1
	Lua_grammar_antlr4ParserT__1       = 2
	Lua_grammar_antlr4ParserT__2       = 3
	Lua_grammar_antlr4ParserT__3       = 4
	Lua_grammar_antlr4ParserT__4       = 5
	Lua_grammar_antlr4ParserT__5       = 6
	Lua_grammar_antlr4ParserT__6       = 7
	Lua_grammar_antlr4ParserT__7       = 8
	Lua_grammar_antlr4ParserT__8       = 9
	Lua_grammar_antlr4ParserT__9       = 10
	Lua_grammar_antlr4ParserT__10      = 11
	Lua_grammar_antlr4ParserT__11      = 12
	Lua_grammar_antlr4ParserT__12      = 13
	Lua_grammar_antlr4ParserT__13      = 14
	Lua_grammar_antlr4ParserT__14      = 15
	Lua_grammar_antlr4ParserT__15      = 16
	Lua_grammar_antlr4ParserT__16      = 17
	Lua_grammar_antlr4ParserT__17      = 18
	Lua_grammar_antlr4ParserT__18      = 19
	Lua_grammar_antlr4ParserT__19      = 20
	Lua_grammar_antlr4ParserT__20      = 21
	Lua_grammar_antlr4ParserT__21      = 22
	Lua_grammar_antlr4ParserT__22      = 23
	Lua_grammar_antlr4ParserT__23      = 24
	Lua_grammar_antlr4ParserT__24      = 25
	Lua_grammar_antlr4ParserT__25      = 26
	Lua_grammar_antlr4ParserT__26      = 27
	Lua_grammar_antlr4ParserT__27      = 28
	Lua_grammar_antlr4ParserT__28      = 29
	Lua_grammar_antlr4ParserT__29      = 30
	Lua_grammar_antlr4ParserT__30      = 31
	Lua_grammar_antlr4ParserT__31      = 32
	Lua_grammar_antlr4ParserT__32      = 33
	Lua_grammar_antlr4ParserT__33      = 34
	Lua_grammar_antlr4ParserT__34      = 35
	Lua_grammar_antlr4ParserT__35      = 36
	Lua_grammar_antlr4ParserT__36      = 37
	Lua_grammar_antlr4ParserT__37      = 38
	Lua_grammar_antlr4ParserT__38      = 39
	Lua_grammar_antlr4ParserT__39      = 40
	Lua_grammar_antlr4ParserT__40      = 41
	Lua_grammar_antlr4ParserT__41      = 42
	Lua_grammar_antlr4ParserT__42      = 43
	Lua_grammar_antlr4ParserT__43      = 44
	Lua_grammar_antlr4ParserT__44      = 45
	Lua_grammar_antlr4ParserT__45      = 46
	Lua_grammar_antlr4ParserT__46      = 47
	Lua_grammar_antlr4ParserT__47      = 48
	Lua_grammar_antlr4ParserT__48      = 49
	Lua_grammar_antlr4ParserT__49      = 50
	Lua_grammar_antlr4ParserT__50      = 51
	Lua_grammar_antlr4ParserT__51      = 52
	Lua_grammar_antlr4ParserT__52      = 53
	Lua_grammar_antlr4ParserT__53      = 54
	Lua_grammar_antlr4ParserT__54      = 55
	Lua_grammar_antlr4ParserT__55      = 56
	Lua_grammar_antlr4ParserT__56      = 57
	Lua_grammar_antlr4ParserT__57      = 58
	Lua_grammar_antlr4ParserT__58      = 59
	Lua_grammar_antlr4ParserT__59      = 60
	Lua_grammar_antlr4ParserT__60      = 61
	Lua_grammar_antlr4ParserT__61      = 62
	Lua_grammar_antlr4ParserT__62      = 63
	Lua_grammar_antlr4ParserT__63      = 64
	Lua_grammar_antlr4ParserT__64      = 65
	Lua_grammar_antlr4ParserT__65      = 66
	Lua_grammar_antlr4ParserT__66      = 67
	Lua_grammar_antlr4ParserT__67      = 68
	Lua_grammar_antlr4ParserT__68      = 69
	Lua_grammar_antlr4ParserT__69      = 70
	Lua_grammar_antlr4ParserT__70      = 71
	Lua_grammar_antlr4ParserT__71      = 72
	Lua_grammar_antlr4ParserT__72      = 73
	Lua_grammar_antlr4ParserT__73      = 74
	Lua_grammar_antlr4ParserT__74      = 75
	Lua_grammar_antlr4ParserT__75      = 76
	Lua_grammar_antlr4ParserT__76      = 77
	Lua_grammar_antlr4ParserT__77      = 78
	Lua_grammar_antlr4ParserT__78      = 79
	Lua_grammar_antlr4ParserT__79      = 80
	Lua_grammar_antlr4ParserT__80      = 81
	Lua_grammar_antlr4ParserT__81      = 82
	Lua_grammar_antlr4ParserT__82      = 83
	Lua_grammar_antlr4ParserT__83      = 84
	Lua_grammar_antlr4ParserT__84      = 85
	Lua_grammar_antlr4ParserT__85      = 86
	Lua_grammar_antlr4ParserT__86      = 87
	Lua_grammar_antlr4ParserT__87      = 88
	Lua_grammar_antlr4ParserT__88      = 89
	Lua_grammar_antlr4ParserT__89      = 90
	Lua_grammar_antlr4ParserT__90      = 91
	Lua_grammar_antlr4ParserT__91      = 92
	Lua_grammar_antlr4ParserT__92      = 93
	Lua_grammar_antlr4ParserT__93      = 94
	Lua_grammar_antlr4ParserT__94      = 95
	Lua_grammar_antlr4ParserT__95      = 96
	Lua_grammar_antlr4ParserT__96      = 97
	Lua_grammar_antlr4ParserT__97      = 98
	Lua_grammar_antlr4ParserT__98      = 99
	Lua_grammar_antlr4ParserT__99      = 100
	Lua_grammar_antlr4ParserT__100     = 101
	Lua_grammar_antlr4ParserT__101     = 102
	Lua_grammar_antlr4ParserT__102     = 103
	Lua_grammar_antlr4ParserT__103     = 104
	Lua_grammar_antlr4ParserT__104     = 105
	Lua_grammar_antlr4ParserT__105     = 106
	Lua_grammar_antlr4ParserT__106     = 107
	Lua_grammar_antlr4ParserT__107     = 108
	Lua_grammar_antlr4ParserT__108     = 109
	Lua_grammar_antlr4ParserT__109     = 110
	Lua_grammar_antlr4ParserT__110     = 111
	Lua_grammar_antlr4ParserT__111     = 112
	Lua_grammar_antlr4ParserT__112     = 113
	Lua_grammar_antlr4ParserT__113     = 114
	Lua_grammar_antlr4ParserT__114     = 115
	Lua_grammar_antlr4ParserT__115     = 116
	Lua_grammar_antlr4ParserIDENTIFIER = 117
	Lua_grammar_antlr4ParserBOOL       = 118
	Lua_grammar_antlr4ParserNIL        = 119
	Lua_grammar_antlr4ParserNUMBER     = 120
	Lua_grammar_antlr4ParserSTRING     = 121
	Lua_grammar_antlr4ParserWS         = 122
	Lua_grammar_antlr4ParserCOMMENT    = 123
)

// Lua_grammar_antlr4Parser rules.
const (
	Lua_grammar_antlr4ParserRULE_program                = 0
	Lua_grammar_antlr4ParserRULE_statement              = 1
	Lua_grammar_antlr4ParserRULE_assignStatement        = 2
	Lua_grammar_antlr4ParserRULE_expression             = 3
	Lua_grammar_antlr4ParserRULE_primaryExpression      = 4
	Lua_grammar_antlr4ParserRULE_callChain              = 5
	Lua_grammar_antlr4ParserRULE_literal                = 6
	Lua_grammar_antlr4ParserRULE_variable               = 7
	Lua_grammar_antlr4ParserRULE_safeAccess             = 8
	Lua_grammar_antlr4ParserRULE_functionCall           = 9
	Lua_grammar_antlr4ParserRULE_tableConstructor       = 10
	Lua_grammar_antlr4ParserRULE_metatable              = 11
	Lua_grammar_antlr4ParserRULE_metamethods            = 12
	Lua_grammar_antlr4ParserRULE_labelStatement         = 13
	Lua_grammar_antlr4ParserRULE_matchArm               = 14
	Lua_grammar_antlr4ParserRULE_pattern                = 15
	Lua_grammar_antlr4ParserRULE_fieldPattern           = 16
	Lua_grammar_antlr4ParserRULE_metamethod             = 17
	Lua_grammar_antlr4ParserRULE_field                  = 18
	Lua_grammar_antlr4ParserRULE_binaryOperation        = 19
	Lua_grammar_antlr4ParserRULE_unaryOperation         = 20
	Lua_grammar_antlr4ParserRULE_controlFlowStatement   = 21
	Lua_grammar_antlr4ParserRULE_ifStatement            = 22
	Lua_grammar_antlr4ParserRULE_whileStatement         = 23
	Lua_grammar_antlr4ParserRULE_repeatStatement        = 24
	Lua_grammar_antlr4ParserRULE_forStatement           = 25
	Lua_grammar_antlr4ParserRULE_breakStatement         = 26
	Lua_grammar_antlr4ParserRULE_gotoStatement          = 27
	Lua_grammar_antlr4ParserRULE_coroutineStatement     = 28
	Lua_grammar_antlr4ParserRULE_protectedCallStatement = 29
	Lua_grammar_antlr4ParserRULE_namedArgs              = 30
	Lua_grammar_antlr4ParserRULE_block                  = 31
	Lua_grammar_antlr4ParserRULE_localDeclaration       = 32
	Lua_grammar_antlr4ParserRULE_functionDeclaration    = 33
	Lua_grammar_antlr4ParserRULE_returnStatement        = 34
	Lua_grammar_antlr4ParserRULE_operatorGroup          = 35
	Lua_grammar_antlr4ParserRULE_logicalOp              = 36
	Lua_grammar_antlr4ParserRULE_comparisonOp           = 37
	Lua_grammar_antlr4ParserRULE_arithOp                = 38
	Lua_grammar_antlr4ParserRULE_bitwiseOp              = 39
	Lua_grammar_antlr4ParserRULE_assignOp               = 40
	Lua_grammar_antlr4ParserRULE_unaryOp                = 41
	Lua_grammar_antlr4ParserRULE_concatOp               = 42
	Lua_grammar_antlr4ParserRULE_varargOp               = 43
	Lua_grammar_antlr4ParserRULE_compoundAssignOp       = 44
	Lua_grammar_antlr4ParserRULE_incrOp                 = 45
	Lua_grammar_antlr4ParserRULE_coalesceOp             = 46
	Lua_grammar_antlr4ParserRULE_shiftAssignOp          = 47
	Lua_grammar_antlr4ParserRULE_nonNullAssertOp        = 48
	Lua_grammar_antlr4ParserRULE_identifierList         = 49
	Lua_grammar_antlr4ParserRULE_expressionList         = 50
	Lua_grammar_antlr4ParserRULE_functionExpression     = 51
	Lua_grammar_antlr4ParserRULE_selectStatement        = 52
	Lua_grammar_antlr4ParserRULE_lambdaExpression       = 53
	Lua_grammar_antlr4ParserRULE_typeAnnotation         = 54
	Lua_grammar_antlr4ParserRULE_typeSpec               = 55
	Lua_grammar_antlr4ParserRULE_experimentalExpression = 56
	Lua_grammar_antlr4ParserRULE_safeNavigation         = 57
	Lua_grammar_antlr4ParserRULE_pipeOperator           = 58
	Lua_grammar_antlr4ParserRULE_decoratorSyntax        = 59
)

// IProgramContext is an interface to support dynamic dispatch.
type IProgramContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	EOF() antlr.TerminalNode
	AllStatement() []IStatementContext
	Statement(i int) IStatementContext

	// IsProgramContext differentiates from other interfaces.
	IsProgramContext()
}

type ProgramContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProgramContext() *ProgramContext {
	var p = new(ProgramContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_program
	return p
}

func InitEmptyProgramContext(p *ProgramContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_program
}

func (*ProgramContext) IsProgramContext() {}

func NewProgramContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProgramContext {
	var p = new(ProgramContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_program

	return p
}

func (s *ProgramContext) GetParser() antlr.Parser { return s.parser }

func (s *ProgramContext) EOF() antlr.TerminalNode {
	return s.GetToken(Lua_grammar_antlr4ParserEOF, 0)
}

func (s *ProgramContext) AllStatement() []IStatementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStatementContext); ok {
			len++
		}
	}

	tst := make([]IStatementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStatementContext); ok {
			tst[i] = t.(IStatementContext)
			i++
		}
	}

	return tst
}

func (s *ProgramContext) Statement(i int) IStatementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *ProgramContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProgramContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProgramContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterProgram(s)
	}
}

func (s *ProgramContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitProgram(s)
	}
}

func (s *ProgramContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitProgram(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) Program() (localctx IProgramContext) {
	localctx = NewProgramContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, Lua_grammar_antlr4ParserRULE_program)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(123)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-4578678679359455230) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&9015995347763207) != 0) {
		{
			p.SetState(120)
			p.Statement()
		}

		p.SetState(125)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(126)
		p.Match(Lua_grammar_antlr4ParserEOF)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStatementContext is an interface to support dynamic dispatch.
type IStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AssignStatement() IAssignStatementContext
	ControlFlowStatement() IControlFlowStatementContext
	FunctionDeclaration() IFunctionDeclarationContext
	ReturnStatement() IReturnStatementContext
	LocalDeclaration() ILocalDeclarationContext
	LabelStatement() ILabelStatementContext
	SelectStatement() ISelectStatementContext
	Expression() IExpressionContext

	// IsStatementContext differentiates from other interfaces.
	IsStatementContext()
}

type StatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementContext() *StatementContext {
	var p = new(StatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_statement
	return p
}

func InitEmptyStatementContext(p *StatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_statement
}

func (*StatementContext) IsStatementContext() {}

func NewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementContext {
	var p = new(StatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_statement

	return p
}

func (s *StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementContext) AssignStatement() IAssignStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssignStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssignStatementContext)
}

func (s *StatementContext) ControlFlowStatement() IControlFlowStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IControlFlowStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IControlFlowStatementContext)
}

func (s *StatementContext) FunctionDeclaration() IFunctionDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionDeclarationContext)
}

func (s *StatementContext) ReturnStatement() IReturnStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReturnStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReturnStatementContext)
}

func (s *StatementContext) LocalDeclaration() ILocalDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILocalDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILocalDeclarationContext)
}

func (s *StatementContext) LabelStatement() ILabelStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILabelStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILabelStatementContext)
}

func (s *StatementContext) SelectStatement() ISelectStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelectStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelectStatementContext)
}

func (s *StatementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterStatement(s)
	}
}

func (s *StatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitStatement(s)
	}
}

func (s *StatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) Statement() (localctx IStatementContext) {
	localctx = NewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, Lua_grammar_antlr4ParserRULE_statement)
	p.SetState(137)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case Lua_grammar_antlr4ParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(128)
			p.AssignStatement()
		}

	case Lua_grammar_antlr4ParserT__41, Lua_grammar_antlr4ParserT__45, Lua_grammar_antlr4ParserT__47, Lua_grammar_antlr4ParserT__49, Lua_grammar_antlr4ParserT__51, Lua_grammar_antlr4ParserT__52, Lua_grammar_antlr4ParserT__53, Lua_grammar_antlr4ParserT__61, Lua_grammar_antlr4ParserT__62:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(129)
			p.ControlFlowStatement()
		}

	case Lua_grammar_antlr4ParserT__64:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(130)
			p.FunctionDeclaration()
		}

	case Lua_grammar_antlr4ParserT__65:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(131)
			p.ReturnStatement()
		}

	case Lua_grammar_antlr4ParserT__63:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(132)
			p.LocalDeclaration()
		}

	case Lua_grammar_antlr4ParserT__20:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(133)
			p.LabelStatement()
		}

	case Lua_grammar_antlr4ParserT__106:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(134)
			p.SelectStatement()
		}

	case Lua_grammar_antlr4ParserT__0:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(135)
			p.Match(Lua_grammar_antlr4ParserT__0)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(136)
			p.expression(0)
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAssignStatementContext is an interface to support dynamic dispatch.
type IAssignStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Variable() IVariableContext
	Expression() IExpressionContext
	AssignOp() IAssignOpContext
	IncrOp() IIncrOpContext
	ShiftAssignOp() IShiftAssignOpContext
	CoalesceOp() ICoalesceOpContext

	// IsAssignStatementContext differentiates from other interfaces.
	IsAssignStatementContext()
}

type AssignStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignStatementContext() *AssignStatementContext {
	var p = new(AssignStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_assignStatement
	return p
}

func InitEmptyAssignStatementContext(p *AssignStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_assignStatement
}

func (*AssignStatementContext) IsAssignStatementContext() {}

func NewAssignStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignStatementContext {
	var p = new(AssignStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_assignStatement

	return p
}

func (s *AssignStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignStatementContext) Variable() IVariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *AssignStatementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *AssignStatementContext) AssignOp() IAssignOpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssignOpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssignOpContext)
}

func (s *AssignStatementContext) IncrOp() IIncrOpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIncrOpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIncrOpContext)
}

func (s *AssignStatementContext) ShiftAssignOp() IShiftAssignOpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShiftAssignOpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShiftAssignOpContext)
}

func (s *AssignStatementContext) CoalesceOp() ICoalesceOpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICoalesceOpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICoalesceOpContext)
}

func (s *AssignStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterAssignStatement(s)
	}
}

func (s *AssignStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitAssignStatement(s)
	}
}

func (s *AssignStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitAssignStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) AssignStatement() (localctx IAssignStatementContext) {
	localctx = NewAssignStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, Lua_grammar_antlr4ParserRULE_assignStatement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(139)
		p.variable(0)
	}
	p.SetState(144)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case Lua_grammar_antlr4ParserT__19, Lua_grammar_antlr4ParserT__85, Lua_grammar_antlr4ParserT__86, Lua_grammar_antlr4ParserT__87, Lua_grammar_antlr4ParserT__88, Lua_grammar_antlr4ParserT__89, Lua_grammar_antlr4ParserT__90, Lua_grammar_antlr4ParserT__91, Lua_grammar_antlr4ParserT__92:
		{
			p.SetState(140)
			p.AssignOp()
		}

	case Lua_grammar_antlr4ParserT__101, Lua_grammar_antlr4ParserT__102:
		{
			p.SetState(141)
			p.IncrOp()
		}

	case Lua_grammar_antlr4ParserT__104, Lua_grammar_antlr4ParserT__105:
		{
			p.SetState(142)
			p.ShiftAssignOp()
		}

	case Lua_grammar_antlr4ParserT__103:
		{
			p.SetState(143)
			p.CoalesceOp()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	{
		p.SetState(146)
		p.expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PrimaryExpression() IPrimaryExpressionContext
	AllOperatorGroup() []IOperatorGroupContext
	OperatorGroup(i int) IOperatorGroupContext
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	UnaryOp() IUnaryOpContext
	AllMatchArm() []IMatchArmContext
	MatchArm(i int) IMatchArmContext
	Block() IBlockContext

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_expression
	return p
}

func InitEmptyExpressionContext(p *ExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_expression
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) PrimaryExpression() IPrimaryExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimaryExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimaryExpressionContext)
}

func (s *ExpressionContext) AllOperatorGroup() []IOperatorGroupContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IOperatorGroupContext); ok {
			len++
		}
	}

	tst := make([]IOperatorGroupContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IOperatorGroupContext); ok {
			tst[i] = t.(IOperatorGroupContext)
			i++
		}
	}

	return tst
}

func (s *ExpressionContext) OperatorGroup(i int) IOperatorGroupContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOperatorGroupContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOperatorGroupContext)
}

func (s *ExpressionContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *ExpressionContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionContext) UnaryOp() IUnaryOpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnaryOpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnaryOpContext)
}

func (s *ExpressionContext) AllMatchArm() []IMatchArmContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMatchArmContext); ok {
			len++
		}
	}

	tst := make([]IMatchArmContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMatchArmContext); ok {
			tst[i] = t.(IMatchArmContext)
			i++
		}
	}

	return tst
}

func (s *ExpressionContext) MatchArm(i int) IMatchArmContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMatchArmContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMatchArmContext)
}

func (s *ExpressionContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterExpression(s)
	}
}

func (s *ExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitExpression(s)
	}
}

func (s *ExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) Expression() (localctx IExpressionContext) {
	return p.expression(0)
}

func (p *Lua_grammar_antlr4Parser) expression(_p int) (localctx IExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 6
	p.EnterRecursionRule(localctx, 6, Lua_grammar_antlr4ParserRULE_expression, _p)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(177)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 5, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(149)
			p.PrimaryExpression()
		}
		p.SetState(155)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 3, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(150)
					p.OperatorGroup()
				}
				{
					p.SetState(151)
					p.expression(0)
				}

			}
			p.SetState(157)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 3, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

	case 2:
		{
			p.SetState(158)
			p.UnaryOp()
		}
		{
			p.SetState(159)
			p.expression(5)
		}

	case 3:
		{
			p.SetState(161)
			p.Match(Lua_grammar_antlr4ParserT__1)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(162)
			p.expression(0)
		}
		{
			p.SetState(163)
			p.Match(Lua_grammar_antlr4ParserT__2)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(165)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == Lua_grammar_antlr4ParserT__16 || ((int64((_la-117)) & ^0x3f) == 0 && ((int64(1)<<(_la-117))&31) != 0) {
			{
				p.SetState(164)
				p.MatchArm()
			}

			p.SetState(167)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(169)
			p.Match(Lua_grammar_antlr4ParserT__3)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		{
			p.SetState(171)
			p.Match(Lua_grammar_antlr4ParserT__4)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(172)
			p.Block()
		}
		{
			p.SetState(173)
			p.Match(Lua_grammar_antlr4ParserT__3)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 5:
		{
			p.SetState(175)
			p.Match(Lua_grammar_antlr4ParserT__5)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(176)
			p.expression(2)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(191)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 7, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(189)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 6, p.GetParserRuleContext()) {
			case 1:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, Lua_grammar_antlr4ParserRULE_expression)
				p.SetState(179)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
					goto errorExit
				}
				{
					p.SetState(180)
					p.OperatorGroup()
				}
				{
					p.SetState(181)
					p.expression(8)
				}

			case 2:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, Lua_grammar_antlr4ParserRULE_expression)
				p.SetState(183)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
					goto errorExit
				}
				{
					p.SetState(184)
					p.OperatorGroup()
				}
				{
					p.SetState(185)
					p.expression(6)
				}

			case 3:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, Lua_grammar_antlr4ParserRULE_expression)
				p.SetState(187)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
					goto errorExit
				}
				{
					p.SetState(188)
					p.Match(Lua_grammar_antlr4ParserT__6)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(193)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 7, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrimaryExpressionContext is an interface to support dynamic dispatch.
type IPrimaryExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Literal() ILiteralContext
	Variable() IVariableContext
	FunctionCall() IFunctionCallContext
	UnaryOperation() IUnaryOperationContext
	TableConstructor() ITableConstructorContext
	FunctionExpression() IFunctionExpressionContext
	Expression() IExpressionContext
	LambdaExpression() ILambdaExpressionContext
	AllCallChain() []ICallChainContext
	CallChain(i int) ICallChainContext

	// IsPrimaryExpressionContext differentiates from other interfaces.
	IsPrimaryExpressionContext()
}

type PrimaryExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimaryExpressionContext() *PrimaryExpressionContext {
	var p = new(PrimaryExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_primaryExpression
	return p
}

func InitEmptyPrimaryExpressionContext(p *PrimaryExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_primaryExpression
}

func (*PrimaryExpressionContext) IsPrimaryExpressionContext() {}

func NewPrimaryExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimaryExpressionContext {
	var p = new(PrimaryExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_primaryExpression

	return p
}

func (s *PrimaryExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimaryExpressionContext) Literal() ILiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *PrimaryExpressionContext) Variable() IVariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *PrimaryExpressionContext) FunctionCall() IFunctionCallContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionCallContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionCallContext)
}

func (s *PrimaryExpressionContext) UnaryOperation() IUnaryOperationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnaryOperationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnaryOperationContext)
}

func (s *PrimaryExpressionContext) TableConstructor() ITableConstructorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableConstructorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableConstructorContext)
}

func (s *PrimaryExpressionContext) FunctionExpression() IFunctionExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionExpressionContext)
}

func (s *PrimaryExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PrimaryExpressionContext) LambdaExpression() ILambdaExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILambdaExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILambdaExpressionContext)
}

func (s *PrimaryExpressionContext) AllCallChain() []ICallChainContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICallChainContext); ok {
			len++
		}
	}

	tst := make([]ICallChainContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICallChainContext); ok {
			tst[i] = t.(ICallChainContext)
			i++
		}
	}

	return tst
}

func (s *PrimaryExpressionContext) CallChain(i int) ICallChainContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICallChainContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICallChainContext)
}

func (s *PrimaryExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimaryExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterPrimaryExpression(s)
	}
}

func (s *PrimaryExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitPrimaryExpression(s)
	}
}

func (s *PrimaryExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitPrimaryExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) PrimaryExpression() (localctx IPrimaryExpressionContext) {
	localctx = NewPrimaryExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, Lua_grammar_antlr4ParserRULE_primaryExpression)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(205)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 8, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(194)
			p.Literal()
		}

	case 2:
		{
			p.SetState(195)
			p.variable(0)
		}

	case 3:
		{
			p.SetState(196)
			p.FunctionCall()
		}

	case 4:
		{
			p.SetState(197)
			p.UnaryOperation()
		}

	case 5:
		{
			p.SetState(198)
			p.TableConstructor()
		}

	case 6:
		{
			p.SetState(199)
			p.FunctionExpression()
		}

	case 7:
		{
			p.SetState(200)
			p.Match(Lua_grammar_antlr4ParserT__7)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(201)
			p.expression(0)
		}
		{
			p.SetState(202)
			p.Match(Lua_grammar_antlr4ParserT__8)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 8:
		{
			p.SetState(204)
			p.LambdaExpression()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.SetState(210)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 9, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(207)
				p.CallChain()
			}

		}
		p.SetState(212)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 9, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICallChainContext is an interface to support dynamic dispatch.
type ICallChainContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsCallChainContext differentiates from other interfaces.
	IsCallChainContext()
}

type CallChainContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallChainContext() *CallChainContext {
	var p = new(CallChainContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_callChain
	return p
}

func InitEmptyCallChainContext(p *CallChainContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_callChain
}

func (*CallChainContext) IsCallChainContext() {}

func NewCallChainContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallChainContext {
	var p = new(CallChainContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_callChain

	return p
}

func (s *CallChainContext) GetParser() antlr.Parser { return s.parser }

func (s *CallChainContext) CopyAll(ctx *CallChainContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *CallChainContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallChainContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type PropertyChainContext struct {
	CallChainContext
}

func NewPropertyChainContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PropertyChainContext {
	var p = new(PropertyChainContext)

	InitEmptyCallChainContext(&p.CallChainContext)
	p.parser = parser
	p.CopyAll(ctx.(*CallChainContext))

	return p
}

func (s *PropertyChainContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PropertyChainContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(Lua_grammar_antlr4ParserIDENTIFIER, 0)
}

func (s *PropertyChainContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterPropertyChain(s)
	}
}

func (s *PropertyChainContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitPropertyChain(s)
	}
}

func (s *PropertyChainContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitPropertyChain(s)

	default:
		return t.VisitChildren(s)
	}
}

type IndexChainContext struct {
	CallChainContext
}

func NewIndexChainContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IndexChainContext {
	var p = new(IndexChainContext)

	InitEmptyCallChainContext(&p.CallChainContext)
	p.parser = parser
	p.CopyAll(ctx.(*CallChainContext))

	return p
}

func (s *IndexChainContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexChainContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IndexChainContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterIndexChain(s)
	}
}

func (s *IndexChainContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitIndexChain(s)
	}
}

func (s *IndexChainContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitIndexChain(s)

	default:
		return t.VisitChildren(s)
	}
}

type MethodChainContext struct {
	CallChainContext
}

func NewMethodChainContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MethodChainContext {
	var p = new(MethodChainContext)

	InitEmptyCallChainContext(&p.CallChainContext)
	p.parser = parser
	p.CopyAll(ctx.(*CallChainContext))

	return p
}

func (s *MethodChainContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MethodChainContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(Lua_grammar_antlr4ParserIDENTIFIER, 0)
}

func (s *MethodChainContext) ExpressionList() IExpressionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *MethodChainContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterMethodChain(s)
	}
}

func (s *MethodChainContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitMethodChain(s)
	}
}

func (s *MethodChainContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitMethodChain(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) CallChain() (localctx ICallChainContext) {
	localctx = NewCallChainContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, Lua_grammar_antlr4ParserRULE_callChain)
	var _la int

	p.SetState(226)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case Lua_grammar_antlr4ParserT__9:
		localctx = NewMethodChainContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(213)
			p.Match(Lua_grammar_antlr4ParserT__9)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(214)
			p.Match(Lua_grammar_antlr4ParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(215)
			p.Match(Lua_grammar_antlr4ParserT__7)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(217)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&2199023386980) != 0) || ((int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&139611594354329601) != 0) {
			{
				p.SetState(216)
				p.ExpressionList()
			}

		}
		{
			p.SetState(219)
			p.Match(Lua_grammar_antlr4ParserT__8)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Lua_grammar_antlr4ParserT__10:
		localctx = NewPropertyChainContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(220)
			p.Match(Lua_grammar_antlr4ParserT__10)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(221)
			p.Match(Lua_grammar_antlr4ParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Lua_grammar_antlr4ParserT__11:
		localctx = NewIndexChainContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(222)
			p.Match(Lua_grammar_antlr4ParserT__11)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(223)
			p.expression(0)
		}
		{
			p.SetState(224)
			p.Match(Lua_grammar_antlr4ParserT__12)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILiteralContext is an interface to support dynamic dispatch.
type ILiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BOOL() antlr.TerminalNode
	NIL() antlr.TerminalNode
	NUMBER() antlr.TerminalNode
	STRING() antlr.TerminalNode

	// IsLiteralContext differentiates from other interfaces.
	IsLiteralContext()
}

type LiteralContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteralContext() *LiteralContext {
	var p = new(LiteralContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_literal
	return p
}

func InitEmptyLiteralContext(p *LiteralContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_literal
}

func (*LiteralContext) IsLiteralContext() {}

func NewLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LiteralContext {
	var p = new(LiteralContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_literal

	return p
}

func (s *LiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *LiteralContext) BOOL() antlr.TerminalNode {
	return s.GetToken(Lua_grammar_antlr4ParserBOOL, 0)
}

func (s *LiteralContext) NIL() antlr.TerminalNode {
	return s.GetToken(Lua_grammar_antlr4ParserNIL, 0)
}

func (s *LiteralContext) NUMBER() antlr.TerminalNode {
	return s.GetToken(Lua_grammar_antlr4ParserNUMBER, 0)
}

func (s *LiteralContext) STRING() antlr.TerminalNode {
	return s.GetToken(Lua_grammar_antlr4ParserSTRING, 0)
}

func (s *LiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterLiteral(s)
	}
}

func (s *LiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitLiteral(s)
	}
}

func (s *LiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) Literal() (localctx ILiteralContext) {
	localctx = NewLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, Lua_grammar_antlr4ParserRULE_literal)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(228)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-118)) & ^0x3f) == 0 && ((int64(1)<<(_la-118))&15) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IVariableContext is an interface to support dynamic dispatch.
type IVariableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IDENTIFIER() antlr.TerminalNode
	Variable() IVariableContext
	SafeAccess() ISafeAccessContext
	Expression() IExpressionContext

	// IsVariableContext differentiates from other interfaces.
	IsVariableContext()
}

type VariableContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableContext() *VariableContext {
	var p = new(VariableContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_variable
	return p
}

func InitEmptyVariableContext(p *VariableContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_variable
}

func (*VariableContext) IsVariableContext() {}

func NewVariableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableContext {
	var p = new(VariableContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_variable

	return p
}

func (s *VariableContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(Lua_grammar_antlr4ParserIDENTIFIER, 0)
}

func (s *VariableContext) Variable() IVariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *VariableContext) SafeAccess() ISafeAccessContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISafeAccessContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISafeAccessContext)
}

func (s *VariableContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *VariableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterVariable(s)
	}
}

func (s *VariableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitVariable(s)
	}
}

func (s *VariableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitVariable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) Variable() (localctx IVariableContext) {
	return p.variable(0)
}

func (p *Lua_grammar_antlr4Parser) variable(_p int) (localctx IVariableContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewVariableContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IVariableContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 14
	p.EnterRecursionRule(localctx, 14, Lua_grammar_antlr4ParserRULE_variable, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(231)
		p.Match(Lua_grammar_antlr4ParserIDENTIFIER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(245)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 13, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(243)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 12, p.GetParserRuleContext()) {
			case 1:
				localctx = NewVariableContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, Lua_grammar_antlr4ParserRULE_variable)
				p.SetState(233)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
					goto errorExit
				}
				{
					p.SetState(234)
					p.SafeAccess()
				}

			case 2:
				localctx = NewVariableContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, Lua_grammar_antlr4ParserRULE_variable)
				p.SetState(235)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
					goto errorExit
				}
				{
					p.SetState(236)
					p.Match(Lua_grammar_antlr4ParserT__11)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(237)
					p.expression(0)
				}
				{
					p.SetState(238)
					p.Match(Lua_grammar_antlr4ParserT__12)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case 3:
				localctx = NewVariableContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, Lua_grammar_antlr4ParserRULE_variable)
				p.SetState(240)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
					goto errorExit
				}
				{
					p.SetState(241)
					p.Match(Lua_grammar_antlr4ParserT__10)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(242)
					p.Match(Lua_grammar_antlr4ParserIDENTIFIER)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(247)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 13, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISafeAccessContext is an interface to support dynamic dispatch.
type ISafeAccessContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IDENTIFIER() antlr.TerminalNode
	Expression() IExpressionContext

	// IsSafeAccessContext differentiates from other interfaces.
	IsSafeAccessContext()
}

type SafeAccessContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySafeAccessContext() *SafeAccessContext {
	var p = new(SafeAccessContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_safeAccess
	return p
}

func InitEmptySafeAccessContext(p *SafeAccessContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_safeAccess
}

func (*SafeAccessContext) IsSafeAccessContext() {}

func NewSafeAccessContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SafeAccessContext {
	var p = new(SafeAccessContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_safeAccess

	return p
}

func (s *SafeAccessContext) GetParser() antlr.Parser { return s.parser }

func (s *SafeAccessContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(Lua_grammar_antlr4ParserIDENTIFIER, 0)
}

func (s *SafeAccessContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SafeAccessContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SafeAccessContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SafeAccessContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterSafeAccess(s)
	}
}

func (s *SafeAccessContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitSafeAccess(s)
	}
}

func (s *SafeAccessContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitSafeAccess(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) SafeAccess() (localctx ISafeAccessContext) {
	localctx = NewSafeAccessContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, Lua_grammar_antlr4ParserRULE_safeAccess)
	p.SetState(254)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case Lua_grammar_antlr4ParserT__13:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(248)
			p.Match(Lua_grammar_antlr4ParserT__13)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(249)
			p.Match(Lua_grammar_antlr4ParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Lua_grammar_antlr4ParserT__14:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(250)
			p.Match(Lua_grammar_antlr4ParserT__14)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(251)
			p.expression(0)
		}
		{
			p.SetState(252)
			p.Match(Lua_grammar_antlr4ParserT__12)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFunctionCallContext is an interface to support dynamic dispatch.
type IFunctionCallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Variable() IVariableContext
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	IDENTIFIER() antlr.TerminalNode

	// IsFunctionCallContext differentiates from other interfaces.
	IsFunctionCallContext()
}

type FunctionCallContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionCallContext() *FunctionCallContext {
	var p = new(FunctionCallContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_functionCall
	return p
}

func InitEmptyFunctionCallContext(p *FunctionCallContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_functionCall
}

func (*FunctionCallContext) IsFunctionCallContext() {}

func NewFunctionCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionCallContext {
	var p = new(FunctionCallContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_functionCall

	return p
}

func (s *FunctionCallContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionCallContext) Variable() IVariableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *FunctionCallContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *FunctionCallContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *FunctionCallContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(Lua_grammar_antlr4ParserIDENTIFIER, 0)
}

func (s *FunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionCallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterFunctionCall(s)
	}
}

func (s *FunctionCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitFunctionCall(s)
	}
}

func (s *FunctionCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitFunctionCall(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) FunctionCall() (localctx IFunctionCallContext) {
	localctx = NewFunctionCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, Lua_grammar_antlr4ParserRULE_functionCall)
	var _la int

	p.SetState(286)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 19, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(256)
			p.variable(0)
		}
		{
			p.SetState(257)
			p.Match(Lua_grammar_antlr4ParserT__7)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(266)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&2199023386980) != 0) || ((int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&139611590059362305) != 0) {
			{
				p.SetState(258)
				p.expression(0)
			}
			p.SetState(263)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == Lua_grammar_antlr4ParserT__15 {
				{
					p.SetState(259)
					p.Match(Lua_grammar_antlr4ParserT__15)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(260)
					p.expression(0)
				}

				p.SetState(265)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(268)
			p.Match(Lua_grammar_antlr4ParserT__8)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(270)
			p.variable(0)
		}
		{
			p.SetState(271)
			p.Match(Lua_grammar_antlr4ParserT__9)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(272)
			p.Match(Lua_grammar_antlr4ParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(273)
			p.Match(Lua_grammar_antlr4ParserT__7)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(282)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&2199023386980) != 0) || ((int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&139611590059362305) != 0) {
			{
				p.SetState(274)
				p.expression(0)
			}
			p.SetState(279)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == Lua_grammar_antlr4ParserT__15 {
				{
					p.SetState(275)
					p.Match(Lua_grammar_antlr4ParserT__15)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(276)
					p.expression(0)
				}

				p.SetState(281)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(284)
			p.Match(Lua_grammar_antlr4ParserT__8)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITableConstructorContext is an interface to support dynamic dispatch.
type ITableConstructorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllField() []IFieldContext
	Field(i int) IFieldContext
	Metatable() IMetatableContext

	// IsTableConstructorContext differentiates from other interfaces.
	IsTableConstructorContext()
}

type TableConstructorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableConstructorContext() *TableConstructorContext {
	var p = new(TableConstructorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_tableConstructor
	return p
}

func InitEmptyTableConstructorContext(p *TableConstructorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_tableConstructor
}

func (*TableConstructorContext) IsTableConstructorContext() {}

func NewTableConstructorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableConstructorContext {
	var p = new(TableConstructorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_tableConstructor

	return p
}

func (s *TableConstructorContext) GetParser() antlr.Parser { return s.parser }

func (s *TableConstructorContext) AllField() []IFieldContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFieldContext); ok {
			len++
		}
	}

	tst := make([]IFieldContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFieldContext); ok {
			tst[i] = t.(IFieldContext)
			i++
		}
	}

	return tst
}

func (s *TableConstructorContext) Field(i int) IFieldContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFieldContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFieldContext)
}

func (s *TableConstructorContext) Metatable() IMetatableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMetatableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMetatableContext)
}

func (s *TableConstructorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableConstructorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableConstructorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterTableConstructor(s)
	}
}

func (s *TableConstructorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitTableConstructor(s)
	}
}

func (s *TableConstructorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitTableConstructor(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) TableConstructor() (localctx ITableConstructorContext) {
	localctx = NewTableConstructorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, Lua_grammar_antlr4ParserRULE_tableConstructor)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(288)
		p.Match(Lua_grammar_antlr4ParserT__16)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(297)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&2199023391076) != 0) || ((int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&139611590059362305) != 0) {
		{
			p.SetState(289)
			p.Field()
		}
		p.SetState(294)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 20, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(290)
					p.Match(Lua_grammar_antlr4ParserT__15)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(291)
					p.Field()
				}

			}
			p.SetState(296)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 20, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

	}
	p.SetState(301)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == Lua_grammar_antlr4ParserT__15 {
		{
			p.SetState(299)
			p.Match(Lua_grammar_antlr4ParserT__15)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(300)
			p.Metatable()
		}

	}
	{
		p.SetState(303)
		p.Match(Lua_grammar_antlr4ParserT__17)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMetatableContext is an interface to support dynamic dispatch.
type IMetatableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	Metamethods() IMetamethodsContext

	// IsMetatableContext differentiates from other interfaces.
	IsMetatableContext()
}

type MetatableContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMetatableContext() *MetatableContext {
	var p = new(MetatableContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_metatable
	return p
}

func InitEmptyMetatableContext(p *MetatableContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_metatable
}

func (*MetatableContext) IsMetatableContext() {}

func NewMetatableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MetatableContext {
	var p = new(MetatableContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_metatable

	return p
}

func (s *MetatableContext) GetParser() antlr.Parser { return s.parser }

func (s *MetatableContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *MetatableContext) Metamethods() IMetamethodsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMetamethodsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMetamethodsContext)
}

func (s *MetatableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MetatableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MetatableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterMetatable(s)
	}
}

func (s *MetatableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitMetatable(s)
	}
}

func (s *MetatableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitMetatable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) Metatable() (localctx IMetatableContext) {
	localctx = NewMetatableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, Lua_grammar_antlr4ParserRULE_metatable)
	p.SetState(312)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case Lua_grammar_antlr4ParserT__18:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(305)
			p.Match(Lua_grammar_antlr4ParserT__18)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(306)
			p.Match(Lua_grammar_antlr4ParserT__19)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(307)
			p.expression(0)
		}

	case Lua_grammar_antlr4ParserT__16:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(308)
			p.Match(Lua_grammar_antlr4ParserT__16)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(309)
			p.Metamethods()
		}
		{
			p.SetState(310)
			p.Match(Lua_grammar_antlr4ParserT__17)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMetamethodsContext is an interface to support dynamic dispatch.
type IMetamethodsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllMetamethod() []IMetamethodContext
	Metamethod(i int) IMetamethodContext

	// IsMetamethodsContext differentiates from other interfaces.
	IsMetamethodsContext()
}

type MetamethodsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMetamethodsContext() *MetamethodsContext {
	var p = new(MetamethodsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_metamethods
	return p
}

func InitEmptyMetamethodsContext(p *MetamethodsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_metamethods
}

func (*MetamethodsContext) IsMetamethodsContext() {}

func NewMetamethodsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MetamethodsContext {
	var p = new(MetamethodsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_metamethods

	return p
}

func (s *MetamethodsContext) GetParser() antlr.Parser { return s.parser }

func (s *MetamethodsContext) AllMetamethod() []IMetamethodContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMetamethodContext); ok {
			len++
		}
	}

	tst := make([]IMetamethodContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMetamethodContext); ok {
			tst[i] = t.(IMetamethodContext)
			i++
		}
	}

	return tst
}

func (s *MetamethodsContext) Metamethod(i int) IMetamethodContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMetamethodContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMetamethodContext)
}

func (s *MetamethodsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MetamethodsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MetamethodsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterMetamethods(s)
	}
}

func (s *MetamethodsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitMetamethods(s)
	}
}

func (s *MetamethodsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitMetamethods(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) Metamethods() (localctx IMetamethodsContext) {
	localctx = NewMetamethodsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, Lua_grammar_antlr4ParserRULE_metamethods)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(314)
		p.Metamethod()
	}
	p.SetState(319)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == Lua_grammar_antlr4ParserT__15 {
		{
			p.SetState(315)
			p.Match(Lua_grammar_antlr4ParserT__15)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(316)
			p.Metamethod()
		}

		p.SetState(321)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILabelStatementContext is an interface to support dynamic dispatch.
type ILabelStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IDENTIFIER() antlr.TerminalNode

	// IsLabelStatementContext differentiates from other interfaces.
	IsLabelStatementContext()
}

type LabelStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabelStatementContext() *LabelStatementContext {
	var p = new(LabelStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_labelStatement
	return p
}

func InitEmptyLabelStatementContext(p *LabelStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_labelStatement
}

func (*LabelStatementContext) IsLabelStatementContext() {}

func NewLabelStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabelStatementContext {
	var p = new(LabelStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_labelStatement

	return p
}

func (s *LabelStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LabelStatementContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(Lua_grammar_antlr4ParserIDENTIFIER, 0)
}

func (s *LabelStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LabelStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterLabelStatement(s)
	}
}

func (s *LabelStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitLabelStatement(s)
	}
}

func (s *LabelStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitLabelStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) LabelStatement() (localctx ILabelStatementContext) {
	localctx = NewLabelStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, Lua_grammar_antlr4ParserRULE_labelStatement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(322)
		p.Match(Lua_grammar_antlr4ParserT__20)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(323)
		p.Match(Lua_grammar_antlr4ParserIDENTIFIER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(324)
		p.Match(Lua_grammar_antlr4ParserT__20)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMatchArmContext is an interface to support dynamic dispatch.
type IMatchArmContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Pattern() IPatternContext
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext

	// IsMatchArmContext differentiates from other interfaces.
	IsMatchArmContext()
}

type MatchArmContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMatchArmContext() *MatchArmContext {
	var p = new(MatchArmContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_matchArm
	return p
}

func InitEmptyMatchArmContext(p *MatchArmContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_matchArm
}

func (*MatchArmContext) IsMatchArmContext() {}

func NewMatchArmContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MatchArmContext {
	var p = new(MatchArmContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_matchArm

	return p
}

func (s *MatchArmContext) GetParser() antlr.Parser { return s.parser }

func (s *MatchArmContext) Pattern() IPatternContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPatternContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPatternContext)
}

func (s *MatchArmContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *MatchArmContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *MatchArmContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MatchArmContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MatchArmContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterMatchArm(s)
	}
}

func (s *MatchArmContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitMatchArm(s)
	}
}

func (s *MatchArmContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitMatchArm(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) MatchArm() (localctx IMatchArmContext) {
	localctx = NewMatchArmContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, Lua_grammar_antlr4ParserRULE_matchArm)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(326)
		p.pattern(0)
	}
	p.SetState(329)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == Lua_grammar_antlr4ParserT__21 {
		{
			p.SetState(327)
			p.Match(Lua_grammar_antlr4ParserT__21)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(328)
			p.expression(0)
		}

	}
	{
		p.SetState(331)
		p.Match(Lua_grammar_antlr4ParserT__22)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(332)
		p.expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPatternContext is an interface to support dynamic dispatch.
type IPatternContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Literal() ILiteralContext
	TableConstructor() ITableConstructorContext
	IDENTIFIER() antlr.TerminalNode
	AllFieldPattern() []IFieldPatternContext
	FieldPattern(i int) IFieldPatternContext
	AllPattern() []IPatternContext
	Pattern(i int) IPatternContext

	// IsPatternContext differentiates from other interfaces.
	IsPatternContext()
}

type PatternContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPatternContext() *PatternContext {
	var p = new(PatternContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_pattern
	return p
}

func InitEmptyPatternContext(p *PatternContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_pattern
}

func (*PatternContext) IsPatternContext() {}

func NewPatternContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PatternContext {
	var p = new(PatternContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_pattern

	return p
}

func (s *PatternContext) GetParser() antlr.Parser { return s.parser }

func (s *PatternContext) Literal() ILiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *PatternContext) TableConstructor() ITableConstructorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableConstructorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableConstructorContext)
}

func (s *PatternContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(Lua_grammar_antlr4ParserIDENTIFIER, 0)
}

func (s *PatternContext) AllFieldPattern() []IFieldPatternContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFieldPatternContext); ok {
			len++
		}
	}

	tst := make([]IFieldPatternContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFieldPatternContext); ok {
			tst[i] = t.(IFieldPatternContext)
			i++
		}
	}

	return tst
}

func (s *PatternContext) FieldPattern(i int) IFieldPatternContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFieldPatternContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFieldPatternContext)
}

func (s *PatternContext) AllPattern() []IPatternContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPatternContext); ok {
			len++
		}
	}

	tst := make([]IPatternContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPatternContext); ok {
			tst[i] = t.(IPatternContext)
			i++
		}
	}

	return tst
}

func (s *PatternContext) Pattern(i int) IPatternContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPatternContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPatternContext)
}

func (s *PatternContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PatternContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PatternContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterPattern(s)
	}
}

func (s *PatternContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitPattern(s)
	}
}

func (s *PatternContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitPattern(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) Pattern() (localctx IPatternContext) {
	return p.pattern(0)
}

func (p *Lua_grammar_antlr4Parser) pattern(_p int) (localctx IPatternContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewPatternContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IPatternContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 30
	p.EnterRecursionRule(localctx, 30, Lua_grammar_antlr4ParserRULE_pattern, _p)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(349)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 27, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(335)
			p.Literal()
		}

	case 2:
		{
			p.SetState(336)
			p.TableConstructor()
		}

	case 3:
		{
			p.SetState(337)
			p.Match(Lua_grammar_antlr4ParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		{
			p.SetState(338)
			p.Match(Lua_grammar_antlr4ParserT__16)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(339)
			p.FieldPattern()
		}
		p.SetState(344)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == Lua_grammar_antlr4ParserT__15 {
			{
				p.SetState(340)
				p.Match(Lua_grammar_antlr4ParserT__15)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(341)
				p.FieldPattern()
			}

			p.SetState(346)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(347)
			p.Match(Lua_grammar_antlr4ParserT__17)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(356)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 28, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewPatternContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, Lua_grammar_antlr4ParserRULE_pattern)
			p.SetState(351)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				goto errorExit
			}
			{
				p.SetState(352)
				p.Match(Lua_grammar_antlr4ParserT__23)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(353)
				p.pattern(3)
			}

		}
		p.SetState(358)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 28, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFieldPatternContext is an interface to support dynamic dispatch.
type IFieldPatternContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IDENTIFIER() antlr.TerminalNode
	Pattern() IPatternContext
	Expression() IExpressionContext

	// IsFieldPatternContext differentiates from other interfaces.
	IsFieldPatternContext()
}

type FieldPatternContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFieldPatternContext() *FieldPatternContext {
	var p = new(FieldPatternContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_fieldPattern
	return p
}

func InitEmptyFieldPatternContext(p *FieldPatternContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_fieldPattern
}

func (*FieldPatternContext) IsFieldPatternContext() {}

func NewFieldPatternContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FieldPatternContext {
	var p = new(FieldPatternContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_fieldPattern

	return p
}

func (s *FieldPatternContext) GetParser() antlr.Parser { return s.parser }

func (s *FieldPatternContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(Lua_grammar_antlr4ParserIDENTIFIER, 0)
}

func (s *FieldPatternContext) Pattern() IPatternContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPatternContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPatternContext)
}

func (s *FieldPatternContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *FieldPatternContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldPatternContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FieldPatternContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterFieldPattern(s)
	}
}

func (s *FieldPatternContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitFieldPattern(s)
	}
}

func (s *FieldPatternContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitFieldPattern(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) FieldPattern() (localctx IFieldPatternContext) {
	localctx = NewFieldPatternContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, Lua_grammar_antlr4ParserRULE_fieldPattern)
	p.SetState(369)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 29, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(359)
			p.Match(Lua_grammar_antlr4ParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(360)
			p.Match(Lua_grammar_antlr4ParserT__19)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(361)
			p.pattern(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(362)
			p.Match(Lua_grammar_antlr4ParserT__11)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(363)
			p.expression(0)
		}
		{
			p.SetState(364)
			p.Match(Lua_grammar_antlr4ParserT__12)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(365)
			p.Match(Lua_grammar_antlr4ParserT__19)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(366)
			p.pattern(0)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(368)
			p.pattern(0)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMetamethodContext is an interface to support dynamic dispatch.
type IMetamethodContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsMetamethodContext differentiates from other interfaces.
	IsMetamethodContext()
}

type MetamethodContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMetamethodContext() *MetamethodContext {
	var p = new(MetamethodContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_metamethod
	return p
}

func InitEmptyMetamethodContext(p *MetamethodContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_metamethod
}

func (*MetamethodContext) IsMetamethodContext() {}

func NewMetamethodContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MetamethodContext {
	var p = new(MetamethodContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_metamethod

	return p
}

func (s *MetamethodContext) GetParser() antlr.Parser { return s.parser }
func (s *MetamethodContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MetamethodContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MetamethodContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterMetamethod(s)
	}
}

func (s *MetamethodContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitMetamethod(s)
	}
}

func (s *MetamethodContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitMetamethod(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) Metamethod() (localctx IMetamethodContext) {
	localctx = NewMetamethodContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, Lua_grammar_antlr4ParserRULE_metamethod)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(371)
		_la = p.GetTokenStream().LA(1)

		if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&2198989701120) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFieldContext is an interface to support dynamic dispatch.
type IFieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IDENTIFIER() antlr.TerminalNode
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	FunctionExpression() IFunctionExpressionContext

	// IsFieldContext differentiates from other interfaces.
	IsFieldContext()
}

type FieldContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFieldContext() *FieldContext {
	var p = new(FieldContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_field
	return p
}

func InitEmptyFieldContext(p *FieldContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_field
}

func (*FieldContext) IsFieldContext() {}

func NewFieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FieldContext {
	var p = new(FieldContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_field

	return p
}

func (s *FieldContext) GetParser() antlr.Parser { return s.parser }

func (s *FieldContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(Lua_grammar_antlr4ParserIDENTIFIER, 0)
}

func (s *FieldContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *FieldContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *FieldContext) FunctionExpression() IFunctionExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionExpressionContext)
}

func (s *FieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterField(s)
	}
}

func (s *FieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitField(s)
	}
}

func (s *FieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitField(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) Field() (localctx IFieldContext) {
	localctx = NewFieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, Lua_grammar_antlr4ParserRULE_field)
	p.SetState(386)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 30, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(373)
			p.Match(Lua_grammar_antlr4ParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(374)
			p.Match(Lua_grammar_antlr4ParserT__19)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(375)
			p.expression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(376)
			p.Match(Lua_grammar_antlr4ParserT__11)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(377)
			p.expression(0)
		}
		{
			p.SetState(378)
			p.Match(Lua_grammar_antlr4ParserT__12)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(379)
			p.Match(Lua_grammar_antlr4ParserT__19)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(380)
			p.expression(0)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(382)
			p.expression(0)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(383)
			p.Match(Lua_grammar_antlr4ParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(384)
			p.Match(Lua_grammar_antlr4ParserT__9)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(385)
			p.FunctionExpression()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBinaryOperationContext is an interface to support dynamic dispatch.
type IBinaryOperationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	ArithOp() IArithOpContext
	BitwiseOp() IBitwiseOpContext
	ComparisonOp() IComparisonOpContext
	LogicalOp() ILogicalOpContext
	ConcatOp() IConcatOpContext
	CompoundAssignOp() ICompoundAssignOpContext
	CoalesceOp() ICoalesceOpContext
	ShiftAssignOp() IShiftAssignOpContext
	IncrOp() IIncrOpContext

	// IsBinaryOperationContext differentiates from other interfaces.
	IsBinaryOperationContext()
}

type BinaryOperationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBinaryOperationContext() *BinaryOperationContext {
	var p = new(BinaryOperationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_binaryOperation
	return p
}

func InitEmptyBinaryOperationContext(p *BinaryOperationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_binaryOperation
}

func (*BinaryOperationContext) IsBinaryOperationContext() {}

func NewBinaryOperationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BinaryOperationContext {
	var p = new(BinaryOperationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_binaryOperation

	return p
}

func (s *BinaryOperationContext) GetParser() antlr.Parser { return s.parser }

func (s *BinaryOperationContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *BinaryOperationContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *BinaryOperationContext) ArithOp() IArithOpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArithOpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArithOpContext)
}

func (s *BinaryOperationContext) BitwiseOp() IBitwiseOpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBitwiseOpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBitwiseOpContext)
}

func (s *BinaryOperationContext) ComparisonOp() IComparisonOpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComparisonOpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComparisonOpContext)
}

func (s *BinaryOperationContext) LogicalOp() ILogicalOpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILogicalOpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILogicalOpContext)
}

func (s *BinaryOperationContext) ConcatOp() IConcatOpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConcatOpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConcatOpContext)
}

func (s *BinaryOperationContext) CompoundAssignOp() ICompoundAssignOpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICompoundAssignOpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICompoundAssignOpContext)
}

func (s *BinaryOperationContext) CoalesceOp() ICoalesceOpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICoalesceOpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICoalesceOpContext)
}

func (s *BinaryOperationContext) ShiftAssignOp() IShiftAssignOpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShiftAssignOpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShiftAssignOpContext)
}

func (s *BinaryOperationContext) IncrOp() IIncrOpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIncrOpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIncrOpContext)
}

func (s *BinaryOperationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BinaryOperationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BinaryOperationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterBinaryOperation(s)
	}
}

func (s *BinaryOperationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitBinaryOperation(s)
	}
}

func (s *BinaryOperationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitBinaryOperation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) BinaryOperation() (localctx IBinaryOperationContext) {
	localctx = NewBinaryOperationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, Lua_grammar_antlr4ParserRULE_binaryOperation)
	p.SetState(424)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 31, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(388)
			p.expression(0)
		}
		{
			p.SetState(389)
			p.ArithOp()
		}
		{
			p.SetState(390)
			p.expression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(392)
			p.expression(0)
		}
		{
			p.SetState(393)
			p.BitwiseOp()
		}
		{
			p.SetState(394)
			p.expression(0)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(396)
			p.expression(0)
		}
		{
			p.SetState(397)
			p.ComparisonOp()
		}
		{
			p.SetState(398)
			p.expression(0)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(400)
			p.expression(0)
		}
		{
			p.SetState(401)
			p.LogicalOp()
		}
		{
			p.SetState(402)
			p.expression(0)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(404)
			p.expression(0)
		}
		{
			p.SetState(405)
			p.ConcatOp()
		}
		{
			p.SetState(406)
			p.expression(0)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(408)
			p.expression(0)
		}
		{
			p.SetState(409)
			p.CompoundAssignOp()
		}
		{
			p.SetState(410)
			p.expression(0)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(412)
			p.expression(0)
		}
		{
			p.SetState(413)
			p.CoalesceOp()
		}
		{
			p.SetState(414)
			p.expression(0)
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(416)
			p.expression(0)
		}
		{
			p.SetState(417)
			p.ShiftAssignOp()
		}
		{
			p.SetState(418)
			p.expression(0)
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(420)
			p.expression(0)
		}
		{
			p.SetState(421)
			p.IncrOp()
		}
		{
			p.SetState(422)
			p.expression(0)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnaryOperationContext is an interface to support dynamic dispatch.
type IUnaryOperationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UnaryOp() IUnaryOpContext
	Expression() IExpressionContext

	// IsUnaryOperationContext differentiates from other interfaces.
	IsUnaryOperationContext()
}

type UnaryOperationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnaryOperationContext() *UnaryOperationContext {
	var p = new(UnaryOperationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_unaryOperation
	return p
}

func InitEmptyUnaryOperationContext(p *UnaryOperationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_unaryOperation
}

func (*UnaryOperationContext) IsUnaryOperationContext() {}

func NewUnaryOperationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnaryOperationContext {
	var p = new(UnaryOperationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_unaryOperation

	return p
}

func (s *UnaryOperationContext) GetParser() antlr.Parser { return s.parser }

func (s *UnaryOperationContext) UnaryOp() IUnaryOpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnaryOpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnaryOpContext)
}

func (s *UnaryOperationContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *UnaryOperationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnaryOperationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnaryOperationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterUnaryOperation(s)
	}
}

func (s *UnaryOperationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitUnaryOperation(s)
	}
}

func (s *UnaryOperationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitUnaryOperation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) UnaryOperation() (localctx IUnaryOperationContext) {
	localctx = NewUnaryOperationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, Lua_grammar_antlr4ParserRULE_unaryOperation)
	p.SetState(431)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 32, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(426)
			p.UnaryOp()
		}
		{
			p.SetState(427)
			p.expression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(429)
			p.Match(Lua_grammar_antlr4ParserT__40)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(430)
			p.expression(0)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IControlFlowStatementContext is an interface to support dynamic dispatch.
type IControlFlowStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IfStatement() IIfStatementContext
	WhileStatement() IWhileStatementContext
	RepeatStatement() IRepeatStatementContext
	ForStatement() IForStatementContext
	BreakStatement() IBreakStatementContext
	GotoStatement() IGotoStatementContext
	CoroutineStatement() ICoroutineStatementContext
	ProtectedCallStatement() IProtectedCallStatementContext

	// IsControlFlowStatementContext differentiates from other interfaces.
	IsControlFlowStatementContext()
}

type ControlFlowStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyControlFlowStatementContext() *ControlFlowStatementContext {
	var p = new(ControlFlowStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_controlFlowStatement
	return p
}

func InitEmptyControlFlowStatementContext(p *ControlFlowStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_controlFlowStatement
}

func (*ControlFlowStatementContext) IsControlFlowStatementContext() {}

func NewControlFlowStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ControlFlowStatementContext {
	var p = new(ControlFlowStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_controlFlowStatement

	return p
}

func (s *ControlFlowStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ControlFlowStatementContext) IfStatement() IIfStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIfStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIfStatementContext)
}

func (s *ControlFlowStatementContext) WhileStatement() IWhileStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWhileStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWhileStatementContext)
}

func (s *ControlFlowStatementContext) RepeatStatement() IRepeatStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRepeatStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRepeatStatementContext)
}

func (s *ControlFlowStatementContext) ForStatement() IForStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForStatementContext)
}

func (s *ControlFlowStatementContext) BreakStatement() IBreakStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBreakStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBreakStatementContext)
}

func (s *ControlFlowStatementContext) GotoStatement() IGotoStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGotoStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGotoStatementContext)
}

func (s *ControlFlowStatementContext) CoroutineStatement() ICoroutineStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICoroutineStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICoroutineStatementContext)
}

func (s *ControlFlowStatementContext) ProtectedCallStatement() IProtectedCallStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProtectedCallStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProtectedCallStatementContext)
}

func (s *ControlFlowStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ControlFlowStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ControlFlowStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterControlFlowStatement(s)
	}
}

func (s *ControlFlowStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitControlFlowStatement(s)
	}
}

func (s *ControlFlowStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitControlFlowStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) ControlFlowStatement() (localctx IControlFlowStatementContext) {
	localctx = NewControlFlowStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, Lua_grammar_antlr4ParserRULE_controlFlowStatement)
	p.SetState(441)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case Lua_grammar_antlr4ParserT__41:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(433)
			p.IfStatement()
		}

	case Lua_grammar_antlr4ParserT__45:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(434)
			p.WhileStatement()
		}

	case Lua_grammar_antlr4ParserT__47:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(435)
			p.RepeatStatement()
		}

	case Lua_grammar_antlr4ParserT__49:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(436)
			p.ForStatement()
		}

	case Lua_grammar_antlr4ParserT__51:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(437)
			p.BreakStatement()
		}

	case Lua_grammar_antlr4ParserT__52:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(438)
			p.GotoStatement()
		}

	case Lua_grammar_antlr4ParserT__53:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(439)
			p.CoroutineStatement()
		}

	case Lua_grammar_antlr4ParserT__61, Lua_grammar_antlr4ParserT__62:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(440)
			p.ProtectedCallStatement()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIfStatementContext is an interface to support dynamic dispatch.
type IIfStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	AllBlock() []IBlockContext
	Block(i int) IBlockContext

	// IsIfStatementContext differentiates from other interfaces.
	IsIfStatementContext()
}

type IfStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIfStatementContext() *IfStatementContext {
	var p = new(IfStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_ifStatement
	return p
}

func InitEmptyIfStatementContext(p *IfStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_ifStatement
}

func (*IfStatementContext) IsIfStatementContext() {}

func NewIfStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IfStatementContext {
	var p = new(IfStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_ifStatement

	return p
}

func (s *IfStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *IfStatementContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *IfStatementContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IfStatementContext) AllBlock() []IBlockContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IBlockContext); ok {
			len++
		}
	}

	tst := make([]IBlockContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IBlockContext); ok {
			tst[i] = t.(IBlockContext)
			i++
		}
	}

	return tst
}

func (s *IfStatementContext) Block(i int) IBlockContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *IfStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IfStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterIfStatement(s)
	}
}

func (s *IfStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitIfStatement(s)
	}
}

func (s *IfStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitIfStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) IfStatement() (localctx IIfStatementContext) {
	localctx = NewIfStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, Lua_grammar_antlr4ParserRULE_ifStatement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(443)
		p.Match(Lua_grammar_antlr4ParserT__41)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(444)
		p.expression(0)
	}
	{
		p.SetState(445)
		p.Match(Lua_grammar_antlr4ParserT__42)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(446)
		p.Block()
	}
	p.SetState(454)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == Lua_grammar_antlr4ParserT__43 {
		{
			p.SetState(447)
			p.Match(Lua_grammar_antlr4ParserT__43)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(448)
			p.expression(0)
		}
		{
			p.SetState(449)
			p.Match(Lua_grammar_antlr4ParserT__42)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(450)
			p.Block()
		}

		p.SetState(456)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(459)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == Lua_grammar_antlr4ParserT__44 {
		{
			p.SetState(457)
			p.Match(Lua_grammar_antlr4ParserT__44)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(458)
			p.Block()
		}

	}
	{
		p.SetState(461)
		p.Match(Lua_grammar_antlr4ParserT__3)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWhileStatementContext is an interface to support dynamic dispatch.
type IWhileStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	Block() IBlockContext

	// IsWhileStatementContext differentiates from other interfaces.
	IsWhileStatementContext()
}

type WhileStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhileStatementContext() *WhileStatementContext {
	var p = new(WhileStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_whileStatement
	return p
}

func InitEmptyWhileStatementContext(p *WhileStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_whileStatement
}

func (*WhileStatementContext) IsWhileStatementContext() {}

func NewWhileStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WhileStatementContext {
	var p = new(WhileStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_whileStatement

	return p
}

func (s *WhileStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *WhileStatementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *WhileStatementContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *WhileStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhileStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WhileStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterWhileStatement(s)
	}
}

func (s *WhileStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitWhileStatement(s)
	}
}

func (s *WhileStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitWhileStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) WhileStatement() (localctx IWhileStatementContext) {
	localctx = NewWhileStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, Lua_grammar_antlr4ParserRULE_whileStatement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(463)
		p.Match(Lua_grammar_antlr4ParserT__45)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(464)
		p.expression(0)
	}
	{
		p.SetState(465)
		p.Match(Lua_grammar_antlr4ParserT__46)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(466)
		p.Block()
	}
	{
		p.SetState(467)
		p.Match(Lua_grammar_antlr4ParserT__3)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRepeatStatementContext is an interface to support dynamic dispatch.
type IRepeatStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Block() IBlockContext
	Expression() IExpressionContext

	// IsRepeatStatementContext differentiates from other interfaces.
	IsRepeatStatementContext()
}

type RepeatStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRepeatStatementContext() *RepeatStatementContext {
	var p = new(RepeatStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_repeatStatement
	return p
}

func InitEmptyRepeatStatementContext(p *RepeatStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_repeatStatement
}

func (*RepeatStatementContext) IsRepeatStatementContext() {}

func NewRepeatStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RepeatStatementContext {
	var p = new(RepeatStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_repeatStatement

	return p
}

func (s *RepeatStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *RepeatStatementContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *RepeatStatementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *RepeatStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RepeatStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RepeatStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterRepeatStatement(s)
	}
}

func (s *RepeatStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitRepeatStatement(s)
	}
}

func (s *RepeatStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitRepeatStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) RepeatStatement() (localctx IRepeatStatementContext) {
	localctx = NewRepeatStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, Lua_grammar_antlr4ParserRULE_repeatStatement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(469)
		p.Match(Lua_grammar_antlr4ParserT__47)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(470)
		p.Block()
	}
	{
		p.SetState(471)
		p.Match(Lua_grammar_antlr4ParserT__48)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(472)
		p.expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IForStatementContext is an interface to support dynamic dispatch.
type IForStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsForStatementContext differentiates from other interfaces.
	IsForStatementContext()
}

type ForStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForStatementContext() *ForStatementContext {
	var p = new(ForStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_forStatement
	return p
}

func InitEmptyForStatementContext(p *ForStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_forStatement
}

func (*ForStatementContext) IsForStatementContext() {}

func NewForStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForStatementContext {
	var p = new(ForStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_forStatement

	return p
}

func (s *ForStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ForStatementContext) CopyAll(ctx *ForStatementContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *ForStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type GenericForContext struct {
	ForStatementContext
}

func NewGenericForContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GenericForContext {
	var p = new(GenericForContext)

	InitEmptyForStatementContext(&p.ForStatementContext)
	p.parser = parser
	p.CopyAll(ctx.(*ForStatementContext))

	return p
}

func (s *GenericForContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GenericForContext) IdentifierList() IIdentifierListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierListContext)
}

func (s *GenericForContext) ExpressionList() IExpressionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *GenericForContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *GenericForContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterGenericFor(s)
	}
}

func (s *GenericForContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitGenericFor(s)
	}
}

func (s *GenericForContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitGenericFor(s)

	default:
		return t.VisitChildren(s)
	}
}

type NumericForContext struct {
	ForStatementContext
}

func NewNumericForContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *NumericForContext {
	var p = new(NumericForContext)

	InitEmptyForStatementContext(&p.ForStatementContext)
	p.parser = parser
	p.CopyAll(ctx.(*ForStatementContext))

	return p
}

func (s *NumericForContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NumericForContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(Lua_grammar_antlr4ParserIDENTIFIER, 0)
}

func (s *NumericForContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *NumericForContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *NumericForContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *NumericForContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterNumericFor(s)
	}
}

func (s *NumericForContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitNumericFor(s)
	}
}

func (s *NumericForContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitNumericFor(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) ForStatement() (localctx IForStatementContext) {
	localctx = NewForStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, Lua_grammar_antlr4ParserRULE_forStatement)
	var _la int

	p.SetState(496)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 37, p.GetParserRuleContext()) {
	case 1:
		localctx = NewNumericForContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(474)
			p.Match(Lua_grammar_antlr4ParserT__49)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(475)
			p.Match(Lua_grammar_antlr4ParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(476)
			p.Match(Lua_grammar_antlr4ParserT__19)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(477)
			p.expression(0)
		}
		{
			p.SetState(478)
			p.Match(Lua_grammar_antlr4ParserT__15)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(479)
			p.expression(0)
		}
		p.SetState(482)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Lua_grammar_antlr4ParserT__15 {
			{
				p.SetState(480)
				p.Match(Lua_grammar_antlr4ParserT__15)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(481)
				p.expression(0)
			}

		}
		{
			p.SetState(484)
			p.Match(Lua_grammar_antlr4ParserT__46)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(485)
			p.Block()
		}
		{
			p.SetState(486)
			p.Match(Lua_grammar_antlr4ParserT__3)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		localctx = NewGenericForContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(488)
			p.Match(Lua_grammar_antlr4ParserT__49)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(489)
			p.IdentifierList()
		}
		{
			p.SetState(490)
			p.Match(Lua_grammar_antlr4ParserT__50)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(491)
			p.ExpressionList()
		}
		{
			p.SetState(492)
			p.Match(Lua_grammar_antlr4ParserT__46)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(493)
			p.Block()
		}
		{
			p.SetState(494)
			p.Match(Lua_grammar_antlr4ParserT__3)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBreakStatementContext is an interface to support dynamic dispatch.
type IBreakStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsBreakStatementContext differentiates from other interfaces.
	IsBreakStatementContext()
}

type BreakStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBreakStatementContext() *BreakStatementContext {
	var p = new(BreakStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_breakStatement
	return p
}

func InitEmptyBreakStatementContext(p *BreakStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_breakStatement
}

func (*BreakStatementContext) IsBreakStatementContext() {}

func NewBreakStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BreakStatementContext {
	var p = new(BreakStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_breakStatement

	return p
}

func (s *BreakStatementContext) GetParser() antlr.Parser { return s.parser }
func (s *BreakStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BreakStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BreakStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterBreakStatement(s)
	}
}

func (s *BreakStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitBreakStatement(s)
	}
}

func (s *BreakStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitBreakStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) BreakStatement() (localctx IBreakStatementContext) {
	localctx = NewBreakStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, Lua_grammar_antlr4ParserRULE_breakStatement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(498)
		p.Match(Lua_grammar_antlr4ParserT__51)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGotoStatementContext is an interface to support dynamic dispatch.
type IGotoStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IDENTIFIER() antlr.TerminalNode

	// IsGotoStatementContext differentiates from other interfaces.
	IsGotoStatementContext()
}

type GotoStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGotoStatementContext() *GotoStatementContext {
	var p = new(GotoStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_gotoStatement
	return p
}

func InitEmptyGotoStatementContext(p *GotoStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_gotoStatement
}

func (*GotoStatementContext) IsGotoStatementContext() {}

func NewGotoStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GotoStatementContext {
	var p = new(GotoStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_gotoStatement

	return p
}

func (s *GotoStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *GotoStatementContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(Lua_grammar_antlr4ParserIDENTIFIER, 0)
}

func (s *GotoStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GotoStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GotoStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterGotoStatement(s)
	}
}

func (s *GotoStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitGotoStatement(s)
	}
}

func (s *GotoStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitGotoStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) GotoStatement() (localctx IGotoStatementContext) {
	localctx = NewGotoStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, Lua_grammar_antlr4ParserRULE_gotoStatement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(500)
		p.Match(Lua_grammar_antlr4ParserT__52)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(501)
		p.Match(Lua_grammar_antlr4ParserIDENTIFIER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICoroutineStatementContext is an interface to support dynamic dispatch.
type ICoroutineStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsCoroutineStatementContext differentiates from other interfaces.
	IsCoroutineStatementContext()
}

type CoroutineStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCoroutineStatementContext() *CoroutineStatementContext {
	var p = new(CoroutineStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_coroutineStatement
	return p
}

func InitEmptyCoroutineStatementContext(p *CoroutineStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_coroutineStatement
}

func (*CoroutineStatementContext) IsCoroutineStatementContext() {}

func NewCoroutineStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CoroutineStatementContext {
	var p = new(CoroutineStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_coroutineStatement

	return p
}

func (s *CoroutineStatementContext) GetParser() antlr.Parser { return s.parser }
func (s *CoroutineStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoroutineStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CoroutineStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterCoroutineStatement(s)
	}
}

func (s *CoroutineStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitCoroutineStatement(s)
	}
}

func (s *CoroutineStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitCoroutineStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) CoroutineStatement() (localctx ICoroutineStatementContext) {
	localctx = NewCoroutineStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, Lua_grammar_antlr4ParserRULE_coroutineStatement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(503)
		p.Match(Lua_grammar_antlr4ParserT__53)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(504)
		p.Match(Lua_grammar_antlr4ParserT__10)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(505)
		_la = p.GetTokenStream().LA(1)

		if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4575657221408423936) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IProtectedCallStatementContext is an interface to support dynamic dispatch.
type IProtectedCallStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ExpressionList() IExpressionListContext
	NamedArgs() INamedArgsContext
	IDENTIFIER() antlr.TerminalNode

	// IsProtectedCallStatementContext differentiates from other interfaces.
	IsProtectedCallStatementContext()
}

type ProtectedCallStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProtectedCallStatementContext() *ProtectedCallStatementContext {
	var p = new(ProtectedCallStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_protectedCallStatement
	return p
}

func InitEmptyProtectedCallStatementContext(p *ProtectedCallStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_protectedCallStatement
}

func (*ProtectedCallStatementContext) IsProtectedCallStatementContext() {}

func NewProtectedCallStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProtectedCallStatementContext {
	var p = new(ProtectedCallStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_protectedCallStatement

	return p
}

func (s *ProtectedCallStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ProtectedCallStatementContext) ExpressionList() IExpressionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *ProtectedCallStatementContext) NamedArgs() INamedArgsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INamedArgsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INamedArgsContext)
}

func (s *ProtectedCallStatementContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(Lua_grammar_antlr4ParserIDENTIFIER, 0)
}

func (s *ProtectedCallStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProtectedCallStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProtectedCallStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterProtectedCallStatement(s)
	}
}

func (s *ProtectedCallStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitProtectedCallStatement(s)
	}
}

func (s *ProtectedCallStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitProtectedCallStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) ProtectedCallStatement() (localctx IProtectedCallStatementContext) {
	localctx = NewProtectedCallStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, Lua_grammar_antlr4ParserRULE_protectedCallStatement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(507)
		_la = p.GetTokenStream().LA(1)

		if !(_la == Lua_grammar_antlr4ParserT__61 || _la == Lua_grammar_antlr4ParserT__62) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(509)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == Lua_grammar_antlr4ParserT__9 || _la == Lua_grammar_antlr4ParserT__10 {
		{
			p.SetState(508)
			_la = p.GetTokenStream().LA(1)

			if !(_la == Lua_grammar_antlr4ParserT__9 || _la == Lua_grammar_antlr4ParserT__10) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(512)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == Lua_grammar_antlr4ParserIDENTIFIER {
		{
			p.SetState(511)
			p.Match(Lua_grammar_antlr4ParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

	{
		p.SetState(514)
		p.Match(Lua_grammar_antlr4ParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(517)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 40, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(515)
			p.ExpressionList()
		}

	case 2:
		{
			p.SetState(516)
			p.NamedArgs()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	{
		p.SetState(519)
		p.Match(Lua_grammar_antlr4ParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INamedArgsContext is an interface to support dynamic dispatch.
type INamedArgsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllIDENTIFIER() []antlr.TerminalNode
	IDENTIFIER(i int) antlr.TerminalNode
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext

	// IsNamedArgsContext differentiates from other interfaces.
	IsNamedArgsContext()
}

type NamedArgsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamedArgsContext() *NamedArgsContext {
	var p = new(NamedArgsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_namedArgs
	return p
}

func InitEmptyNamedArgsContext(p *NamedArgsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_namedArgs
}

func (*NamedArgsContext) IsNamedArgsContext() {}

func NewNamedArgsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamedArgsContext {
	var p = new(NamedArgsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_namedArgs

	return p
}

func (s *NamedArgsContext) GetParser() antlr.Parser { return s.parser }

func (s *NamedArgsContext) AllIDENTIFIER() []antlr.TerminalNode {
	return s.GetTokens(Lua_grammar_antlr4ParserIDENTIFIER)
}

func (s *NamedArgsContext) IDENTIFIER(i int) antlr.TerminalNode {
	return s.GetToken(Lua_grammar_antlr4ParserIDENTIFIER, i)
}

func (s *NamedArgsContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *NamedArgsContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *NamedArgsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamedArgsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamedArgsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterNamedArgs(s)
	}
}

func (s *NamedArgsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitNamedArgs(s)
	}
}

func (s *NamedArgsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitNamedArgs(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) NamedArgs() (localctx INamedArgsContext) {
	localctx = NewNamedArgsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, Lua_grammar_antlr4ParserRULE_namedArgs)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(521)
		p.Match(Lua_grammar_antlr4ParserIDENTIFIER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(522)
		p.Match(Lua_grammar_antlr4ParserT__19)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(523)
		p.expression(0)
	}
	p.SetState(530)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == Lua_grammar_antlr4ParserT__15 {
		{
			p.SetState(524)
			p.Match(Lua_grammar_antlr4ParserT__15)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(525)
			p.Match(Lua_grammar_antlr4ParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(526)
			p.Match(Lua_grammar_antlr4ParserT__19)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(527)
			p.expression(0)
		}

		p.SetState(532)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBlockContext is an interface to support dynamic dispatch.
type IBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllStatement() []IStatementContext
	Statement(i int) IStatementContext

	// IsBlockContext differentiates from other interfaces.
	IsBlockContext()
}

type BlockContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlockContext() *BlockContext {
	var p = new(BlockContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_block
	return p
}

func InitEmptyBlockContext(p *BlockContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_block
}

func (*BlockContext) IsBlockContext() {}

func NewBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlockContext {
	var p = new(BlockContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_block

	return p
}

func (s *BlockContext) GetParser() antlr.Parser { return s.parser }

func (s *BlockContext) AllStatement() []IStatementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStatementContext); ok {
			len++
		}
	}

	tst := make([]IStatementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStatementContext); ok {
			tst[i] = t.(IStatementContext)
			i++
		}
	}

	return tst
}

func (s *BlockContext) Statement(i int) IStatementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *BlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BlockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterBlock(s)
	}
}

func (s *BlockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitBlock(s)
	}
}

func (s *BlockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitBlock(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) Block() (localctx IBlockContext) {
	localctx = NewBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, Lua_grammar_antlr4ParserRULE_block)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(536)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-4578678679359455230) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&9015995347763207) != 0) {
		{
			p.SetState(533)
			p.Statement()
		}

		p.SetState(538)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILocalDeclarationContext is an interface to support dynamic dispatch.
type ILocalDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllIDENTIFIER() []antlr.TerminalNode
	IDENTIFIER(i int) antlr.TerminalNode
	TypeAnnotation() ITypeAnnotationContext
	Expression() IExpressionContext
	ExpressionList() IExpressionListContext
	Block() IBlockContext

	// IsLocalDeclarationContext differentiates from other interfaces.
	IsLocalDeclarationContext()
}

type LocalDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLocalDeclarationContext() *LocalDeclarationContext {
	var p = new(LocalDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_localDeclaration
	return p
}

func InitEmptyLocalDeclarationContext(p *LocalDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_localDeclaration
}

func (*LocalDeclarationContext) IsLocalDeclarationContext() {}

func NewLocalDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LocalDeclarationContext {
	var p = new(LocalDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_localDeclaration

	return p
}

func (s *LocalDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *LocalDeclarationContext) AllIDENTIFIER() []antlr.TerminalNode {
	return s.GetTokens(Lua_grammar_antlr4ParserIDENTIFIER)
}

func (s *LocalDeclarationContext) IDENTIFIER(i int) antlr.TerminalNode {
	return s.GetToken(Lua_grammar_antlr4ParserIDENTIFIER, i)
}

func (s *LocalDeclarationContext) TypeAnnotation() ITypeAnnotationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeAnnotationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeAnnotationContext)
}

func (s *LocalDeclarationContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *LocalDeclarationContext) ExpressionList() IExpressionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *LocalDeclarationContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *LocalDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LocalDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LocalDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterLocalDeclaration(s)
	}
}

func (s *LocalDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitLocalDeclaration(s)
	}
}

func (s *LocalDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitLocalDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) LocalDeclaration() (localctx ILocalDeclarationContext) {
	localctx = NewLocalDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, Lua_grammar_antlr4ParserRULE_localDeclaration)
	var _la int

	p.SetState(577)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 48, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(539)
			p.Match(Lua_grammar_antlr4ParserT__63)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(541)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Lua_grammar_antlr4ParserT__9 {
			{
				p.SetState(540)
				p.TypeAnnotation()
			}

		}
		{
			p.SetState(543)
			p.Match(Lua_grammar_antlr4ParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(546)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Lua_grammar_antlr4ParserT__19 {
			{
				p.SetState(544)
				p.Match(Lua_grammar_antlr4ParserT__19)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(545)
				p.expression(0)
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(548)
			p.Match(Lua_grammar_antlr4ParserT__63)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(549)
			p.Match(Lua_grammar_antlr4ParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(554)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == Lua_grammar_antlr4ParserT__15 {
			{
				p.SetState(550)
				p.Match(Lua_grammar_antlr4ParserT__15)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(551)
				p.Match(Lua_grammar_antlr4ParserIDENTIFIER)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(556)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(557)
			p.Match(Lua_grammar_antlr4ParserT__19)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(558)
			p.ExpressionList()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(559)
			p.Match(Lua_grammar_antlr4ParserT__63)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(560)
			p.Match(Lua_grammar_antlr4ParserT__64)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(561)
			p.Match(Lua_grammar_antlr4ParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(562)
			p.Match(Lua_grammar_antlr4ParserT__7)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(571)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Lua_grammar_antlr4ParserIDENTIFIER {
			{
				p.SetState(563)
				p.Match(Lua_grammar_antlr4ParserIDENTIFIER)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(568)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == Lua_grammar_antlr4ParserT__15 {
				{
					p.SetState(564)
					p.Match(Lua_grammar_antlr4ParserT__15)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(565)
					p.Match(Lua_grammar_antlr4ParserIDENTIFIER)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

				p.SetState(570)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(573)
			p.Match(Lua_grammar_antlr4ParserT__8)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(574)
			p.Block()
		}
		{
			p.SetState(575)
			p.Match(Lua_grammar_antlr4ParserT__3)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFunctionDeclarationContext is an interface to support dynamic dispatch.
type IFunctionDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllIDENTIFIER() []antlr.TerminalNode
	IDENTIFIER(i int) antlr.TerminalNode
	Block() IBlockContext
	VarargOp() IVarargOpContext

	// IsFunctionDeclarationContext differentiates from other interfaces.
	IsFunctionDeclarationContext()
}

type FunctionDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionDeclarationContext() *FunctionDeclarationContext {
	var p = new(FunctionDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_functionDeclaration
	return p
}

func InitEmptyFunctionDeclarationContext(p *FunctionDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_functionDeclaration
}

func (*FunctionDeclarationContext) IsFunctionDeclarationContext() {}

func NewFunctionDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionDeclarationContext {
	var p = new(FunctionDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_functionDeclaration

	return p
}

func (s *FunctionDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionDeclarationContext) AllIDENTIFIER() []antlr.TerminalNode {
	return s.GetTokens(Lua_grammar_antlr4ParserIDENTIFIER)
}

func (s *FunctionDeclarationContext) IDENTIFIER(i int) antlr.TerminalNode {
	return s.GetToken(Lua_grammar_antlr4ParserIDENTIFIER, i)
}

func (s *FunctionDeclarationContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *FunctionDeclarationContext) VarargOp() IVarargOpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVarargOpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVarargOpContext)
}

func (s *FunctionDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterFunctionDeclaration(s)
	}
}

func (s *FunctionDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitFunctionDeclaration(s)
	}
}

func (s *FunctionDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitFunctionDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) FunctionDeclaration() (localctx IFunctionDeclarationContext) {
	localctx = NewFunctionDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, Lua_grammar_antlr4ParserRULE_functionDeclaration)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(579)
		p.Match(Lua_grammar_antlr4ParserT__64)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(584)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 49, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(580)
			p.Match(Lua_grammar_antlr4ParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(581)
			p.Match(Lua_grammar_antlr4ParserT__10)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	} else if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 49, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(582)
			p.Match(Lua_grammar_antlr4ParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(583)
			p.Match(Lua_grammar_antlr4ParserT__9)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(586)
		p.Match(Lua_grammar_antlr4ParserIDENTIFIER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(587)
		p.Match(Lua_grammar_antlr4ParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(601)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	switch p.GetTokenStream().LA(1) {
	case Lua_grammar_antlr4ParserIDENTIFIER:
		{
			p.SetState(588)
			p.Match(Lua_grammar_antlr4ParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(593)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 50, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(589)
					p.Match(Lua_grammar_antlr4ParserT__15)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(590)
					p.Match(Lua_grammar_antlr4ParserIDENTIFIER)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(595)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 50, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(598)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == Lua_grammar_antlr4ParserT__15 {
			{
				p.SetState(596)
				p.Match(Lua_grammar_antlr4ParserT__15)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(597)
				p.VarargOp()
			}

		}

	case Lua_grammar_antlr4ParserT__96:
		{
			p.SetState(600)
			p.VarargOp()
		}

	case Lua_grammar_antlr4ParserT__8:

	default:
	}
	{
		p.SetState(603)
		p.Match(Lua_grammar_antlr4ParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(604)
		p.Block()
	}
	{
		p.SetState(605)
		p.Match(Lua_grammar_antlr4ParserT__3)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IReturnStatementContext is an interface to support dynamic dispatch.
type IReturnStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	FunctionCall() IFunctionCallContext

	// IsReturnStatementContext differentiates from other interfaces.
	IsReturnStatementContext()
}

type ReturnStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturnStatementContext() *ReturnStatementContext {
	var p = new(ReturnStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_returnStatement
	return p
}

func InitEmptyReturnStatementContext(p *ReturnStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_returnStatement
}

func (*ReturnStatementContext) IsReturnStatementContext() {}

func NewReturnStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturnStatementContext {
	var p = new(ReturnStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_returnStatement

	return p
}

func (s *ReturnStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturnStatementContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *ReturnStatementContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ReturnStatementContext) FunctionCall() IFunctionCallContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionCallContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionCallContext)
}

func (s *ReturnStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReturnStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterReturnStatement(s)
	}
}

func (s *ReturnStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitReturnStatement(s)
	}
}

func (s *ReturnStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitReturnStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) ReturnStatement() (localctx IReturnStatementContext) {
	localctx = NewReturnStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, Lua_grammar_antlr4ParserRULE_returnStatement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(607)
		p.Match(Lua_grammar_antlr4ParserT__65)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(617)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 54, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(608)
			p.expression(0)
		}
		p.SetState(613)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == Lua_grammar_antlr4ParserT__15 {
			{
				p.SetState(609)
				p.Match(Lua_grammar_antlr4ParserT__15)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(610)
				p.expression(0)
			}

			p.SetState(615)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	} else if p.HasError() { // JIM
		goto errorExit
	} else if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 54, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(616)
			p.FunctionCall()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOperatorGroupContext is an interface to support dynamic dispatch.
type IOperatorGroupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LogicalOp() ILogicalOpContext
	ComparisonOp() IComparisonOpContext
	ArithOp() IArithOpContext
	BitwiseOp() IBitwiseOpContext
	AssignOp() IAssignOpContext
	UnaryOp() IUnaryOpContext
	ConcatOp() IConcatOpContext
	CompoundAssignOp() ICompoundAssignOpContext
	IncrOp() IIncrOpContext
	CoalesceOp() ICoalesceOpContext
	ShiftAssignOp() IShiftAssignOpContext
	SafeAccess() ISafeAccessContext
	NonNullAssertOp() INonNullAssertOpContext

	// IsOperatorGroupContext differentiates from other interfaces.
	IsOperatorGroupContext()
}

type OperatorGroupContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOperatorGroupContext() *OperatorGroupContext {
	var p = new(OperatorGroupContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_operatorGroup
	return p
}

func InitEmptyOperatorGroupContext(p *OperatorGroupContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_operatorGroup
}

func (*OperatorGroupContext) IsOperatorGroupContext() {}

func NewOperatorGroupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OperatorGroupContext {
	var p = new(OperatorGroupContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_operatorGroup

	return p
}

func (s *OperatorGroupContext) GetParser() antlr.Parser { return s.parser }

func (s *OperatorGroupContext) LogicalOp() ILogicalOpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILogicalOpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILogicalOpContext)
}

func (s *OperatorGroupContext) ComparisonOp() IComparisonOpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComparisonOpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComparisonOpContext)
}

func (s *OperatorGroupContext) ArithOp() IArithOpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArithOpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArithOpContext)
}

func (s *OperatorGroupContext) BitwiseOp() IBitwiseOpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBitwiseOpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBitwiseOpContext)
}

func (s *OperatorGroupContext) AssignOp() IAssignOpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssignOpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssignOpContext)
}

func (s *OperatorGroupContext) UnaryOp() IUnaryOpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnaryOpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnaryOpContext)
}

func (s *OperatorGroupContext) ConcatOp() IConcatOpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConcatOpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConcatOpContext)
}

func (s *OperatorGroupContext) CompoundAssignOp() ICompoundAssignOpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICompoundAssignOpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICompoundAssignOpContext)
}

func (s *OperatorGroupContext) IncrOp() IIncrOpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIncrOpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIncrOpContext)
}

func (s *OperatorGroupContext) CoalesceOp() ICoalesceOpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICoalesceOpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICoalesceOpContext)
}

func (s *OperatorGroupContext) ShiftAssignOp() IShiftAssignOpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShiftAssignOpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShiftAssignOpContext)
}

func (s *OperatorGroupContext) SafeAccess() ISafeAccessContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISafeAccessContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISafeAccessContext)
}

func (s *OperatorGroupContext) NonNullAssertOp() INonNullAssertOpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INonNullAssertOpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INonNullAssertOpContext)
}

func (s *OperatorGroupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OperatorGroupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OperatorGroupContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterOperatorGroup(s)
	}
}

func (s *OperatorGroupContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitOperatorGroup(s)
	}
}

func (s *OperatorGroupContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitOperatorGroup(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) OperatorGroup() (localctx IOperatorGroupContext) {
	localctx = NewOperatorGroupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, Lua_grammar_antlr4ParserRULE_operatorGroup)
	p.SetState(633)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 55, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(619)
			p.LogicalOp()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(620)
			p.ComparisonOp()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(621)
			p.ArithOp()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(622)
			p.BitwiseOp()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(623)
			p.AssignOp()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(624)
			p.UnaryOp()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(625)
			p.ConcatOp()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(626)
			p.CompoundAssignOp()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(627)
			p.IncrOp()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(628)
			p.CoalesceOp()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(629)
			p.ShiftAssignOp()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(630)
			p.Match(Lua_grammar_antlr4ParserT__22)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(631)
			p.SafeAccess()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(632)
			p.NonNullAssertOp()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILogicalOpContext is an interface to support dynamic dispatch.
type ILogicalOpContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsLogicalOpContext differentiates from other interfaces.
	IsLogicalOpContext()
}

type LogicalOpContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLogicalOpContext() *LogicalOpContext {
	var p = new(LogicalOpContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_logicalOp
	return p
}

func InitEmptyLogicalOpContext(p *LogicalOpContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_logicalOp
}

func (*LogicalOpContext) IsLogicalOpContext() {}

func NewLogicalOpContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LogicalOpContext {
	var p = new(LogicalOpContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_logicalOp

	return p
}

func (s *LogicalOpContext) GetParser() antlr.Parser { return s.parser }
func (s *LogicalOpContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalOpContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LogicalOpContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterLogicalOp(s)
	}
}

func (s *LogicalOpContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitLogicalOp(s)
	}
}

func (s *LogicalOpContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitLogicalOp(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) LogicalOp() (localctx ILogicalOpContext) {
	localctx = NewLogicalOpContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, Lua_grammar_antlr4ParserRULE_logicalOp)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(635)
		_la = p.GetTokenStream().LA(1)

		if !(_la == Lua_grammar_antlr4ParserT__66 || _la == Lua_grammar_antlr4ParserT__67) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IComparisonOpContext is an interface to support dynamic dispatch.
type IComparisonOpContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsComparisonOpContext differentiates from other interfaces.
	IsComparisonOpContext()
}

type ComparisonOpContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyComparisonOpContext() *ComparisonOpContext {
	var p = new(ComparisonOpContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_comparisonOp
	return p
}

func InitEmptyComparisonOpContext(p *ComparisonOpContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_comparisonOp
}

func (*ComparisonOpContext) IsComparisonOpContext() {}

func NewComparisonOpContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ComparisonOpContext {
	var p = new(ComparisonOpContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_comparisonOp

	return p
}

func (s *ComparisonOpContext) GetParser() antlr.Parser { return s.parser }
func (s *ComparisonOpContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ComparisonOpContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ComparisonOpContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterComparisonOp(s)
	}
}

func (s *ComparisonOpContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitComparisonOp(s)
	}
}

func (s *ComparisonOpContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitComparisonOp(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) ComparisonOp() (localctx IComparisonOpContext) {
	localctx = NewComparisonOpContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, Lua_grammar_antlr4ParserRULE_comparisonOp)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(637)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-69)) & ^0x3f) == 0 && ((int64(1)<<(_la-69))&63) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IArithOpContext is an interface to support dynamic dispatch.
type IArithOpContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsArithOpContext differentiates from other interfaces.
	IsArithOpContext()
}

type ArithOpContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArithOpContext() *ArithOpContext {
	var p = new(ArithOpContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_arithOp
	return p
}

func InitEmptyArithOpContext(p *ArithOpContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_arithOp
}

func (*ArithOpContext) IsArithOpContext() {}

func NewArithOpContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArithOpContext {
	var p = new(ArithOpContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_arithOp

	return p
}

func (s *ArithOpContext) GetParser() antlr.Parser { return s.parser }
func (s *ArithOpContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArithOpContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArithOpContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterArithOp(s)
	}
}

func (s *ArithOpContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitArithOp(s)
	}
}

func (s *ArithOpContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitArithOp(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) ArithOp() (localctx IArithOpContext) {
	localctx = NewArithOpContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, Lua_grammar_antlr4ParserRULE_arithOp)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(639)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-75)) & ^0x3f) == 0 && ((int64(1)<<(_la-75))&127) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBitwiseOpContext is an interface to support dynamic dispatch.
type IBitwiseOpContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsBitwiseOpContext differentiates from other interfaces.
	IsBitwiseOpContext()
}

type BitwiseOpContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitwiseOpContext() *BitwiseOpContext {
	var p = new(BitwiseOpContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_bitwiseOp
	return p
}

func InitEmptyBitwiseOpContext(p *BitwiseOpContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_bitwiseOp
}

func (*BitwiseOpContext) IsBitwiseOpContext() {}

func NewBitwiseOpContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitwiseOpContext {
	var p = new(BitwiseOpContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_bitwiseOp

	return p
}

func (s *BitwiseOpContext) GetParser() antlr.Parser { return s.parser }
func (s *BitwiseOpContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseOpContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitwiseOpContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterBitwiseOp(s)
	}
}

func (s *BitwiseOpContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitBitwiseOp(s)
	}
}

func (s *BitwiseOpContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitBitwiseOp(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) BitwiseOp() (localctx IBitwiseOpContext) {
	localctx = NewBitwiseOpContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, Lua_grammar_antlr4ParserRULE_bitwiseOp)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(641)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-24)) & ^0x3f) == 0 && ((int64(1)<<(_la-24))&4323455642275676161) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAssignOpContext is an interface to support dynamic dispatch.
type IAssignOpContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsAssignOpContext differentiates from other interfaces.
	IsAssignOpContext()
}

type AssignOpContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignOpContext() *AssignOpContext {
	var p = new(AssignOpContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_assignOp
	return p
}

func InitEmptyAssignOpContext(p *AssignOpContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_assignOp
}

func (*AssignOpContext) IsAssignOpContext() {}

func NewAssignOpContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignOpContext {
	var p = new(AssignOpContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_assignOp

	return p
}

func (s *AssignOpContext) GetParser() antlr.Parser { return s.parser }
func (s *AssignOpContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignOpContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignOpContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterAssignOp(s)
	}
}

func (s *AssignOpContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitAssignOp(s)
	}
}

func (s *AssignOpContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitAssignOp(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) AssignOp() (localctx IAssignOpContext) {
	localctx = NewAssignOpContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, Lua_grammar_antlr4ParserRULE_assignOp)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(643)
		_la = p.GetTokenStream().LA(1)

		if !(_la == Lua_grammar_antlr4ParserT__19 || ((int64((_la-86)) & ^0x3f) == 0 && ((int64(1)<<(_la-86))&255) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnaryOpContext is an interface to support dynamic dispatch.
type IUnaryOpContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsUnaryOpContext differentiates from other interfaces.
	IsUnaryOpContext()
}

type UnaryOpContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnaryOpContext() *UnaryOpContext {
	var p = new(UnaryOpContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_unaryOp
	return p
}

func InitEmptyUnaryOpContext(p *UnaryOpContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_unaryOp
}

func (*UnaryOpContext) IsUnaryOpContext() {}

func NewUnaryOpContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnaryOpContext {
	var p = new(UnaryOpContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_unaryOp

	return p
}

func (s *UnaryOpContext) GetParser() antlr.Parser { return s.parser }
func (s *UnaryOpContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnaryOpContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnaryOpContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterUnaryOp(s)
	}
}

func (s *UnaryOpContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitUnaryOp(s)
	}
}

func (s *UnaryOpContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitUnaryOp(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) UnaryOp() (localctx IUnaryOpContext) {
	localctx = NewUnaryOpContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, Lua_grammar_antlr4ParserRULE_unaryOp)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(645)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-41)) & ^0x3f) == 0 && ((int64(1)<<(_la-41))&27026030170472449) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IConcatOpContext is an interface to support dynamic dispatch.
type IConcatOpContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsConcatOpContext differentiates from other interfaces.
	IsConcatOpContext()
}

type ConcatOpContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConcatOpContext() *ConcatOpContext {
	var p = new(ConcatOpContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_concatOp
	return p
}

func InitEmptyConcatOpContext(p *ConcatOpContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_concatOp
}

func (*ConcatOpContext) IsConcatOpContext() {}

func NewConcatOpContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConcatOpContext {
	var p = new(ConcatOpContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_concatOp

	return p
}

func (s *ConcatOpContext) GetParser() antlr.Parser { return s.parser }
func (s *ConcatOpContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConcatOpContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConcatOpContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterConcatOp(s)
	}
}

func (s *ConcatOpContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitConcatOp(s)
	}
}

func (s *ConcatOpContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitConcatOp(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) ConcatOp() (localctx IConcatOpContext) {
	localctx = NewConcatOpContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, Lua_grammar_antlr4ParserRULE_concatOp)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(647)
		p.Match(Lua_grammar_antlr4ParserT__95)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IVarargOpContext is an interface to support dynamic dispatch.
type IVarargOpContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsVarargOpContext differentiates from other interfaces.
	IsVarargOpContext()
}

type VarargOpContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVarargOpContext() *VarargOpContext {
	var p = new(VarargOpContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_varargOp
	return p
}

func InitEmptyVarargOpContext(p *VarargOpContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_varargOp
}

func (*VarargOpContext) IsVarargOpContext() {}

func NewVarargOpContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VarargOpContext {
	var p = new(VarargOpContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_varargOp

	return p
}

func (s *VarargOpContext) GetParser() antlr.Parser { return s.parser }
func (s *VarargOpContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VarargOpContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VarargOpContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterVarargOp(s)
	}
}

func (s *VarargOpContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitVarargOp(s)
	}
}

func (s *VarargOpContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitVarargOp(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) VarargOp() (localctx IVarargOpContext) {
	localctx = NewVarargOpContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, Lua_grammar_antlr4ParserRULE_varargOp)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(649)
		p.Match(Lua_grammar_antlr4ParserT__96)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICompoundAssignOpContext is an interface to support dynamic dispatch.
type ICompoundAssignOpContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsCompoundAssignOpContext differentiates from other interfaces.
	IsCompoundAssignOpContext()
}

type CompoundAssignOpContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCompoundAssignOpContext() *CompoundAssignOpContext {
	var p = new(CompoundAssignOpContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_compoundAssignOp
	return p
}

func InitEmptyCompoundAssignOpContext(p *CompoundAssignOpContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_compoundAssignOp
}

func (*CompoundAssignOpContext) IsCompoundAssignOpContext() {}

func NewCompoundAssignOpContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CompoundAssignOpContext {
	var p = new(CompoundAssignOpContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_compoundAssignOp

	return p
}

func (s *CompoundAssignOpContext) GetParser() antlr.Parser { return s.parser }
func (s *CompoundAssignOpContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CompoundAssignOpContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CompoundAssignOpContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterCompoundAssignOp(s)
	}
}

func (s *CompoundAssignOpContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitCompoundAssignOp(s)
	}
}

func (s *CompoundAssignOpContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitCompoundAssignOp(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) CompoundAssignOp() (localctx ICompoundAssignOpContext) {
	localctx = NewCompoundAssignOpContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, Lua_grammar_antlr4ParserRULE_compoundAssignOp)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(651)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-86)) & ^0x3f) == 0 && ((int64(1)<<(_la-86))&61503) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIncrOpContext is an interface to support dynamic dispatch.
type IIncrOpContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsIncrOpContext differentiates from other interfaces.
	IsIncrOpContext()
}

type IncrOpContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIncrOpContext() *IncrOpContext {
	var p = new(IncrOpContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_incrOp
	return p
}

func InitEmptyIncrOpContext(p *IncrOpContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_incrOp
}

func (*IncrOpContext) IsIncrOpContext() {}

func NewIncrOpContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IncrOpContext {
	var p = new(IncrOpContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_incrOp

	return p
}

func (s *IncrOpContext) GetParser() antlr.Parser { return s.parser }
func (s *IncrOpContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IncrOpContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IncrOpContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterIncrOp(s)
	}
}

func (s *IncrOpContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitIncrOp(s)
	}
}

func (s *IncrOpContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitIncrOp(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) IncrOp() (localctx IIncrOpContext) {
	localctx = NewIncrOpContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, Lua_grammar_antlr4ParserRULE_incrOp)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(653)
		_la = p.GetTokenStream().LA(1)

		if !(_la == Lua_grammar_antlr4ParserT__101 || _la == Lua_grammar_antlr4ParserT__102) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICoalesceOpContext is an interface to support dynamic dispatch.
type ICoalesceOpContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsCoalesceOpContext differentiates from other interfaces.
	IsCoalesceOpContext()
}

type CoalesceOpContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCoalesceOpContext() *CoalesceOpContext {
	var p = new(CoalesceOpContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_coalesceOp
	return p
}

func InitEmptyCoalesceOpContext(p *CoalesceOpContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_coalesceOp
}

func (*CoalesceOpContext) IsCoalesceOpContext() {}

func NewCoalesceOpContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CoalesceOpContext {
	var p = new(CoalesceOpContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_coalesceOp

	return p
}

func (s *CoalesceOpContext) GetParser() antlr.Parser { return s.parser }
func (s *CoalesceOpContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CoalesceOpContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CoalesceOpContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterCoalesceOp(s)
	}
}

func (s *CoalesceOpContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitCoalesceOp(s)
	}
}

func (s *CoalesceOpContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitCoalesceOp(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) CoalesceOp() (localctx ICoalesceOpContext) {
	localctx = NewCoalesceOpContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, Lua_grammar_antlr4ParserRULE_coalesceOp)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(655)
		p.Match(Lua_grammar_antlr4ParserT__103)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IShiftAssignOpContext is an interface to support dynamic dispatch.
type IShiftAssignOpContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsShiftAssignOpContext differentiates from other interfaces.
	IsShiftAssignOpContext()
}

type ShiftAssignOpContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShiftAssignOpContext() *ShiftAssignOpContext {
	var p = new(ShiftAssignOpContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_shiftAssignOp
	return p
}

func InitEmptyShiftAssignOpContext(p *ShiftAssignOpContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_shiftAssignOp
}

func (*ShiftAssignOpContext) IsShiftAssignOpContext() {}

func NewShiftAssignOpContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShiftAssignOpContext {
	var p = new(ShiftAssignOpContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_shiftAssignOp

	return p
}

func (s *ShiftAssignOpContext) GetParser() antlr.Parser { return s.parser }
func (s *ShiftAssignOpContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShiftAssignOpContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShiftAssignOpContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterShiftAssignOp(s)
	}
}

func (s *ShiftAssignOpContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitShiftAssignOp(s)
	}
}

func (s *ShiftAssignOpContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitShiftAssignOp(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) ShiftAssignOp() (localctx IShiftAssignOpContext) {
	localctx = NewShiftAssignOpContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, Lua_grammar_antlr4ParserRULE_shiftAssignOp)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(657)
		_la = p.GetTokenStream().LA(1)

		if !(_la == Lua_grammar_antlr4ParserT__104 || _la == Lua_grammar_antlr4ParserT__105) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INonNullAssertOpContext is an interface to support dynamic dispatch.
type INonNullAssertOpContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsNonNullAssertOpContext differentiates from other interfaces.
	IsNonNullAssertOpContext()
}

type NonNullAssertOpContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNonNullAssertOpContext() *NonNullAssertOpContext {
	var p = new(NonNullAssertOpContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_nonNullAssertOp
	return p
}

func InitEmptyNonNullAssertOpContext(p *NonNullAssertOpContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_nonNullAssertOp
}

func (*NonNullAssertOpContext) IsNonNullAssertOpContext() {}

func NewNonNullAssertOpContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NonNullAssertOpContext {
	var p = new(NonNullAssertOpContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_nonNullAssertOp

	return p
}

func (s *NonNullAssertOpContext) GetParser() antlr.Parser { return s.parser }
func (s *NonNullAssertOpContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NonNullAssertOpContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NonNullAssertOpContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterNonNullAssertOp(s)
	}
}

func (s *NonNullAssertOpContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitNonNullAssertOp(s)
	}
}

func (s *NonNullAssertOpContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitNonNullAssertOp(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) NonNullAssertOp() (localctx INonNullAssertOpContext) {
	localctx = NewNonNullAssertOpContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, Lua_grammar_antlr4ParserRULE_nonNullAssertOp)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(659)
		p.Match(Lua_grammar_antlr4ParserT__6)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIdentifierListContext is an interface to support dynamic dispatch.
type IIdentifierListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllIDENTIFIER() []antlr.TerminalNode
	IDENTIFIER(i int) antlr.TerminalNode

	// IsIdentifierListContext differentiates from other interfaces.
	IsIdentifierListContext()
}

type IdentifierListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierListContext() *IdentifierListContext {
	var p = new(IdentifierListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_identifierList
	return p
}

func InitEmptyIdentifierListContext(p *IdentifierListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_identifierList
}

func (*IdentifierListContext) IsIdentifierListContext() {}

func NewIdentifierListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierListContext {
	var p = new(IdentifierListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_identifierList

	return p
}

func (s *IdentifierListContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierListContext) AllIDENTIFIER() []antlr.TerminalNode {
	return s.GetTokens(Lua_grammar_antlr4ParserIDENTIFIER)
}

func (s *IdentifierListContext) IDENTIFIER(i int) antlr.TerminalNode {
	return s.GetToken(Lua_grammar_antlr4ParserIDENTIFIER, i)
}

func (s *IdentifierListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterIdentifierList(s)
	}
}

func (s *IdentifierListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitIdentifierList(s)
	}
}

func (s *IdentifierListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitIdentifierList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) IdentifierList() (localctx IIdentifierListContext) {
	localctx = NewIdentifierListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, Lua_grammar_antlr4ParserRULE_identifierList)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(661)
		p.Match(Lua_grammar_antlr4ParserIDENTIFIER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(666)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == Lua_grammar_antlr4ParserT__15 {
		{
			p.SetState(662)
			p.Match(Lua_grammar_antlr4ParserT__15)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(663)
			p.Match(Lua_grammar_antlr4ParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(668)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExpressionListContext is an interface to support dynamic dispatch.
type IExpressionListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	VarargOp() IVarargOpContext

	// IsExpressionListContext differentiates from other interfaces.
	IsExpressionListContext()
}

type ExpressionListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionListContext() *ExpressionListContext {
	var p = new(ExpressionListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_expressionList
	return p
}

func InitEmptyExpressionListContext(p *ExpressionListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_expressionList
}

func (*ExpressionListContext) IsExpressionListContext() {}

func NewExpressionListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionListContext {
	var p = new(ExpressionListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_expressionList

	return p
}

func (s *ExpressionListContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionListContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *ExpressionListContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionListContext) VarargOp() IVarargOpContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVarargOpContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVarargOpContext)
}

func (s *ExpressionListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterExpressionList(s)
	}
}

func (s *ExpressionListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitExpressionList(s)
	}
}

func (s *ExpressionListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitExpressionList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) ExpressionList() (localctx IExpressionListContext) {
	localctx = NewExpressionListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, Lua_grammar_antlr4ParserRULE_expressionList)
	var _la int

	p.SetState(678)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case Lua_grammar_antlr4ParserT__1, Lua_grammar_antlr4ParserT__4, Lua_grammar_antlr4ParserT__5, Lua_grammar_antlr4ParserT__7, Lua_grammar_antlr4ParserT__16, Lua_grammar_antlr4ParserT__40, Lua_grammar_antlr4ParserT__64, Lua_grammar_antlr4ParserT__75, Lua_grammar_antlr4ParserT__82, Lua_grammar_antlr4ParserT__93, Lua_grammar_antlr4ParserT__94, Lua_grammar_antlr4ParserIDENTIFIER, Lua_grammar_antlr4ParserBOOL, Lua_grammar_antlr4ParserNIL, Lua_grammar_antlr4ParserNUMBER, Lua_grammar_antlr4ParserSTRING:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(669)
			p.expression(0)
		}
		p.SetState(674)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == Lua_grammar_antlr4ParserT__15 {
			{
				p.SetState(670)
				p.Match(Lua_grammar_antlr4ParserT__15)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(671)
				p.expression(0)
			}

			p.SetState(676)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	case Lua_grammar_antlr4ParserT__96:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(677)
			p.VarargOp()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFunctionExpressionContext is an interface to support dynamic dispatch.
type IFunctionExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Block() IBlockContext
	Expression() IExpressionContext
	AllIDENTIFIER() []antlr.TerminalNode
	IDENTIFIER(i int) antlr.TerminalNode

	// IsFunctionExpressionContext differentiates from other interfaces.
	IsFunctionExpressionContext()
}

type FunctionExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionExpressionContext() *FunctionExpressionContext {
	var p = new(FunctionExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_functionExpression
	return p
}

func InitEmptyFunctionExpressionContext(p *FunctionExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_functionExpression
}

func (*FunctionExpressionContext) IsFunctionExpressionContext() {}

func NewFunctionExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionExpressionContext {
	var p = new(FunctionExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_functionExpression

	return p
}

func (s *FunctionExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionExpressionContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *FunctionExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *FunctionExpressionContext) AllIDENTIFIER() []antlr.TerminalNode {
	return s.GetTokens(Lua_grammar_antlr4ParserIDENTIFIER)
}

func (s *FunctionExpressionContext) IDENTIFIER(i int) antlr.TerminalNode {
	return s.GetToken(Lua_grammar_antlr4ParserIDENTIFIER, i)
}

func (s *FunctionExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterFunctionExpression(s)
	}
}

func (s *FunctionExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitFunctionExpression(s)
	}
}

func (s *FunctionExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitFunctionExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) FunctionExpression() (localctx IFunctionExpressionContext) {
	localctx = NewFunctionExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, Lua_grammar_antlr4ParserRULE_functionExpression)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(680)
		p.Match(Lua_grammar_antlr4ParserT__64)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(683)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == Lua_grammar_antlr4ParserIDENTIFIER {
		{
			p.SetState(681)
			p.Match(Lua_grammar_antlr4ParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(682)
			p.Match(Lua_grammar_antlr4ParserT__9)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(685)
		p.Match(Lua_grammar_antlr4ParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(694)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == Lua_grammar_antlr4ParserIDENTIFIER {
		{
			p.SetState(686)
			p.Match(Lua_grammar_antlr4ParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(691)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == Lua_grammar_antlr4ParserT__15 {
			{
				p.SetState(687)
				p.Match(Lua_grammar_antlr4ParserT__15)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(688)
				p.Match(Lua_grammar_antlr4ParserIDENTIFIER)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(693)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(696)
		p.Match(Lua_grammar_antlr4ParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(702)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case Lua_grammar_antlr4ParserT__0, Lua_grammar_antlr4ParserT__3, Lua_grammar_antlr4ParserT__20, Lua_grammar_antlr4ParserT__41, Lua_grammar_antlr4ParserT__45, Lua_grammar_antlr4ParserT__47, Lua_grammar_antlr4ParserT__49, Lua_grammar_antlr4ParserT__51, Lua_grammar_antlr4ParserT__52, Lua_grammar_antlr4ParserT__53, Lua_grammar_antlr4ParserT__61, Lua_grammar_antlr4ParserT__62, Lua_grammar_antlr4ParserT__63, Lua_grammar_antlr4ParserT__64, Lua_grammar_antlr4ParserT__65, Lua_grammar_antlr4ParserT__106, Lua_grammar_antlr4ParserIDENTIFIER:
		{
			p.SetState(697)
			p.Block()
		}
		{
			p.SetState(698)
			p.Match(Lua_grammar_antlr4ParserT__3)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Lua_grammar_antlr4ParserT__22:
		{
			p.SetState(700)
			p.Match(Lua_grammar_antlr4ParserT__22)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(701)
			p.expression(0)
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelectStatementContext is an interface to support dynamic dispatch.
type ISelectStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext

	// IsSelectStatementContext differentiates from other interfaces.
	IsSelectStatementContext()
}

type SelectStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectStatementContext() *SelectStatementContext {
	var p = new(SelectStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_selectStatement
	return p
}

func InitEmptySelectStatementContext(p *SelectStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_selectStatement
}

func (*SelectStatementContext) IsSelectStatementContext() {}

func NewSelectStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectStatementContext {
	var p = new(SelectStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_selectStatement

	return p
}

func (s *SelectStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectStatementContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *SelectStatementContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SelectStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterSelectStatement(s)
	}
}

func (s *SelectStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitSelectStatement(s)
	}
}

func (s *SelectStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitSelectStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) SelectStatement() (localctx ISelectStatementContext) {
	localctx = NewSelectStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, Lua_grammar_antlr4ParserRULE_selectStatement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(704)
		p.Match(Lua_grammar_antlr4ParserT__106)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(705)
		p.Match(Lua_grammar_antlr4ParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(708)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 63, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(706)
			p.Match(Lua_grammar_antlr4ParserT__40)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		{
			p.SetState(707)
			p.expression(0)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	{
		p.SetState(710)
		p.Match(Lua_grammar_antlr4ParserT__15)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(711)
		p.expression(0)
	}
	{
		p.SetState(712)
		p.Match(Lua_grammar_antlr4ParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILambdaExpressionContext is an interface to support dynamic dispatch.
type ILambdaExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	AllIDENTIFIER() []antlr.TerminalNode
	IDENTIFIER(i int) antlr.TerminalNode

	// IsLambdaExpressionContext differentiates from other interfaces.
	IsLambdaExpressionContext()
}

type LambdaExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLambdaExpressionContext() *LambdaExpressionContext {
	var p = new(LambdaExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_lambdaExpression
	return p
}

func InitEmptyLambdaExpressionContext(p *LambdaExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_lambdaExpression
}

func (*LambdaExpressionContext) IsLambdaExpressionContext() {}

func NewLambdaExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LambdaExpressionContext {
	var p = new(LambdaExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_lambdaExpression

	return p
}

func (s *LambdaExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *LambdaExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *LambdaExpressionContext) AllIDENTIFIER() []antlr.TerminalNode {
	return s.GetTokens(Lua_grammar_antlr4ParserIDENTIFIER)
}

func (s *LambdaExpressionContext) IDENTIFIER(i int) antlr.TerminalNode {
	return s.GetToken(Lua_grammar_antlr4ParserIDENTIFIER, i)
}

func (s *LambdaExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LambdaExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LambdaExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterLambdaExpression(s)
	}
}

func (s *LambdaExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitLambdaExpression(s)
	}
}

func (s *LambdaExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitLambdaExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) LambdaExpression() (localctx ILambdaExpressionContext) {
	localctx = NewLambdaExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, Lua_grammar_antlr4ParserRULE_lambdaExpression)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(714)
		p.Match(Lua_grammar_antlr4ParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(723)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == Lua_grammar_antlr4ParserIDENTIFIER {
		{
			p.SetState(715)
			p.Match(Lua_grammar_antlr4ParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(720)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == Lua_grammar_antlr4ParserT__15 {
			{
				p.SetState(716)
				p.Match(Lua_grammar_antlr4ParserT__15)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(717)
				p.Match(Lua_grammar_antlr4ParserIDENTIFIER)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(722)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(725)
		p.Match(Lua_grammar_antlr4ParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(726)
		p.Match(Lua_grammar_antlr4ParserT__22)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(727)
		p.expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeAnnotationContext is an interface to support dynamic dispatch.
type ITypeAnnotationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TypeSpec() ITypeSpecContext

	// IsTypeAnnotationContext differentiates from other interfaces.
	IsTypeAnnotationContext()
}

type TypeAnnotationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeAnnotationContext() *TypeAnnotationContext {
	var p = new(TypeAnnotationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_typeAnnotation
	return p
}

func InitEmptyTypeAnnotationContext(p *TypeAnnotationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_typeAnnotation
}

func (*TypeAnnotationContext) IsTypeAnnotationContext() {}

func NewTypeAnnotationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeAnnotationContext {
	var p = new(TypeAnnotationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_typeAnnotation

	return p
}

func (s *TypeAnnotationContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeAnnotationContext) TypeSpec() ITypeSpecContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeSpecContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeSpecContext)
}

func (s *TypeAnnotationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeAnnotationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeAnnotationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterTypeAnnotation(s)
	}
}

func (s *TypeAnnotationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitTypeAnnotation(s)
	}
}

func (s *TypeAnnotationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitTypeAnnotation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) TypeAnnotation() (localctx ITypeAnnotationContext) {
	localctx = NewTypeAnnotationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, Lua_grammar_antlr4ParserRULE_typeAnnotation)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(729)
		p.Match(Lua_grammar_antlr4ParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(730)
		p.typeSpec(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeSpecContext is an interface to support dynamic dispatch.
type ITypeSpecContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllTypeSpec() []ITypeSpecContext
	TypeSpec(i int) ITypeSpecContext

	// IsTypeSpecContext differentiates from other interfaces.
	IsTypeSpecContext()
}

type TypeSpecContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeSpecContext() *TypeSpecContext {
	var p = new(TypeSpecContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_typeSpec
	return p
}

func InitEmptyTypeSpecContext(p *TypeSpecContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_typeSpec
}

func (*TypeSpecContext) IsTypeSpecContext() {}

func NewTypeSpecContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeSpecContext {
	var p = new(TypeSpecContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_typeSpec

	return p
}

func (s *TypeSpecContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeSpecContext) AllTypeSpec() []ITypeSpecContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITypeSpecContext); ok {
			len++
		}
	}

	tst := make([]ITypeSpecContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITypeSpecContext); ok {
			tst[i] = t.(ITypeSpecContext)
			i++
		}
	}

	return tst
}

func (s *TypeSpecContext) TypeSpec(i int) ITypeSpecContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeSpecContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeSpecContext)
}

func (s *TypeSpecContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeSpecContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeSpecContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterTypeSpec(s)
	}
}

func (s *TypeSpecContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitTypeSpec(s)
	}
}

func (s *TypeSpecContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitTypeSpec(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) TypeSpec() (localctx ITypeSpecContext) {
	return p.typeSpec(0)
}

func (p *Lua_grammar_antlr4Parser) typeSpec(_p int) (localctx ITypeSpecContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewTypeSpecContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ITypeSpecContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 110
	p.EnterRecursionRule(localctx, 110, Lua_grammar_antlr4ParserRULE_typeSpec, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(745)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case Lua_grammar_antlr4ParserT__107:
		{
			p.SetState(733)
			p.Match(Lua_grammar_antlr4ParserT__107)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Lua_grammar_antlr4ParserT__108:
		{
			p.SetState(734)
			p.Match(Lua_grammar_antlr4ParserT__108)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Lua_grammar_antlr4ParserT__109:
		{
			p.SetState(735)
			p.Match(Lua_grammar_antlr4ParserT__109)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Lua_grammar_antlr4ParserT__110:
		{
			p.SetState(736)
			p.Match(Lua_grammar_antlr4ParserT__110)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Lua_grammar_antlr4ParserT__64:
		{
			p.SetState(737)
			p.Match(Lua_grammar_antlr4ParserT__64)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Lua_grammar_antlr4ParserT__111:
		{
			p.SetState(738)
			p.Match(Lua_grammar_antlr4ParserT__111)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case Lua_grammar_antlr4ParserT__113:
		{
			p.SetState(739)
			p.Match(Lua_grammar_antlr4ParserT__113)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(740)
			p.typeSpec(0)
		}
		{
			p.SetState(741)
			p.Match(Lua_grammar_antlr4ParserT__15)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(742)
			p.typeSpec(0)
		}
		{
			p.SetState(743)
			p.Match(Lua_grammar_antlr4ParserT__72)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(751)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 67, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewTypeSpecContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, Lua_grammar_antlr4ParserRULE_typeSpec)
			p.SetState(747)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				goto errorExit
			}
			{
				p.SetState(748)
				p.Match(Lua_grammar_antlr4ParserT__112)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(753)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 67, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExperimentalExpressionContext is an interface to support dynamic dispatch.
type IExperimentalExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SafeNavigation() ISafeNavigationContext
	PipeOperator() IPipeOperatorContext
	DecoratorSyntax() IDecoratorSyntaxContext

	// IsExperimentalExpressionContext differentiates from other interfaces.
	IsExperimentalExpressionContext()
}

type ExperimentalExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExperimentalExpressionContext() *ExperimentalExpressionContext {
	var p = new(ExperimentalExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_experimentalExpression
	return p
}

func InitEmptyExperimentalExpressionContext(p *ExperimentalExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_experimentalExpression
}

func (*ExperimentalExpressionContext) IsExperimentalExpressionContext() {}

func NewExperimentalExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExperimentalExpressionContext {
	var p = new(ExperimentalExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_experimentalExpression

	return p
}

func (s *ExperimentalExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExperimentalExpressionContext) SafeNavigation() ISafeNavigationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISafeNavigationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISafeNavigationContext)
}

func (s *ExperimentalExpressionContext) PipeOperator() IPipeOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPipeOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPipeOperatorContext)
}

func (s *ExperimentalExpressionContext) DecoratorSyntax() IDecoratorSyntaxContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDecoratorSyntaxContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDecoratorSyntaxContext)
}

func (s *ExperimentalExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExperimentalExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExperimentalExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterExperimentalExpression(s)
	}
}

func (s *ExperimentalExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitExperimentalExpression(s)
	}
}

func (s *ExperimentalExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitExperimentalExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) ExperimentalExpression() (localctx IExperimentalExpressionContext) {
	localctx = NewExperimentalExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, Lua_grammar_antlr4ParserRULE_experimentalExpression)
	p.SetState(757)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 68, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(754)
			p.SafeNavigation()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(755)
			p.PipeOperator()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(756)
			p.DecoratorSyntax()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISafeNavigationContext is an interface to support dynamic dispatch.
type ISafeNavigationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	IDENTIFIER() antlr.TerminalNode

	// IsSafeNavigationContext differentiates from other interfaces.
	IsSafeNavigationContext()
}

type SafeNavigationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySafeNavigationContext() *SafeNavigationContext {
	var p = new(SafeNavigationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_safeNavigation
	return p
}

func InitEmptySafeNavigationContext(p *SafeNavigationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_safeNavigation
}

func (*SafeNavigationContext) IsSafeNavigationContext() {}

func NewSafeNavigationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SafeNavigationContext {
	var p = new(SafeNavigationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_safeNavigation

	return p
}

func (s *SafeNavigationContext) GetParser() antlr.Parser { return s.parser }

func (s *SafeNavigationContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *SafeNavigationContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SafeNavigationContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(Lua_grammar_antlr4ParserIDENTIFIER, 0)
}

func (s *SafeNavigationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SafeNavigationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SafeNavigationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterSafeNavigation(s)
	}
}

func (s *SafeNavigationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitSafeNavigation(s)
	}
}

func (s *SafeNavigationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitSafeNavigation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) SafeNavigation() (localctx ISafeNavigationContext) {
	localctx = NewSafeNavigationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, Lua_grammar_antlr4ParserRULE_safeNavigation)
	p.SetState(768)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 69, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(759)
			p.expression(0)
		}
		{
			p.SetState(760)
			p.Match(Lua_grammar_antlr4ParserT__13)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(761)
			p.Match(Lua_grammar_antlr4ParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(763)
			p.expression(0)
		}
		{
			p.SetState(764)
			p.Match(Lua_grammar_antlr4ParserT__14)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(765)
			p.expression(0)
		}
		{
			p.SetState(766)
			p.Match(Lua_grammar_antlr4ParserT__12)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPipeOperatorContext is an interface to support dynamic dispatch.
type IPipeOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext

	// IsPipeOperatorContext differentiates from other interfaces.
	IsPipeOperatorContext()
}

type PipeOperatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPipeOperatorContext() *PipeOperatorContext {
	var p = new(PipeOperatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_pipeOperator
	return p
}

func InitEmptyPipeOperatorContext(p *PipeOperatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_pipeOperator
}

func (*PipeOperatorContext) IsPipeOperatorContext() {}

func NewPipeOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PipeOperatorContext {
	var p = new(PipeOperatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_pipeOperator

	return p
}

func (s *PipeOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *PipeOperatorContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *PipeOperatorContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PipeOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PipeOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PipeOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterPipeOperator(s)
	}
}

func (s *PipeOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitPipeOperator(s)
	}
}

func (s *PipeOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitPipeOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) PipeOperator() (localctx IPipeOperatorContext) {
	localctx = NewPipeOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, Lua_grammar_antlr4ParserRULE_pipeOperator)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(770)
		p.expression(0)
	}
	{
		p.SetState(771)
		p.Match(Lua_grammar_antlr4ParserT__114)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(772)
		p.expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDecoratorSyntaxContext is an interface to support dynamic dispatch.
type IDecoratorSyntaxContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IDENTIFIER() antlr.TerminalNode
	ExpressionList() IExpressionListContext

	// IsDecoratorSyntaxContext differentiates from other interfaces.
	IsDecoratorSyntaxContext()
}

type DecoratorSyntaxContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDecoratorSyntaxContext() *DecoratorSyntaxContext {
	var p = new(DecoratorSyntaxContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_decoratorSyntax
	return p
}

func InitEmptyDecoratorSyntaxContext(p *DecoratorSyntaxContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_decoratorSyntax
}

func (*DecoratorSyntaxContext) IsDecoratorSyntaxContext() {}

func NewDecoratorSyntaxContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DecoratorSyntaxContext {
	var p = new(DecoratorSyntaxContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = Lua_grammar_antlr4ParserRULE_decoratorSyntax

	return p
}

func (s *DecoratorSyntaxContext) GetParser() antlr.Parser { return s.parser }

func (s *DecoratorSyntaxContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(Lua_grammar_antlr4ParserIDENTIFIER, 0)
}

func (s *DecoratorSyntaxContext) ExpressionList() IExpressionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *DecoratorSyntaxContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DecoratorSyntaxContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DecoratorSyntaxContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.EnterDecoratorSyntax(s)
	}
}

func (s *DecoratorSyntaxContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(Lua_grammar_antlr4Listener); ok {
		listenerT.ExitDecoratorSyntax(s)
	}
}

func (s *DecoratorSyntaxContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case Lua_grammar_antlr4Visitor:
		return t.VisitDecoratorSyntax(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *Lua_grammar_antlr4Parser) DecoratorSyntax() (localctx IDecoratorSyntaxContext) {
	localctx = NewDecoratorSyntaxContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, Lua_grammar_antlr4ParserRULE_decoratorSyntax)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(774)
		p.Match(Lua_grammar_antlr4ParserT__115)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(775)
		p.Match(Lua_grammar_antlr4ParserIDENTIFIER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(781)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == Lua_grammar_antlr4ParserT__7 {
		{
			p.SetState(776)
			p.Match(Lua_grammar_antlr4ParserT__7)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(778)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&2199023386980) != 0) || ((int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&139611594354329601) != 0) {
			{
				p.SetState(777)
				p.ExpressionList()
			}

		}
		{
			p.SetState(780)
			p.Match(Lua_grammar_antlr4ParserT__8)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

func (p *Lua_grammar_antlr4Parser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 3:
		var t *ExpressionContext = nil
		if localctx != nil {
			t = localctx.(*ExpressionContext)
		}
		return p.Expression_Sempred(t, predIndex)

	case 7:
		var t *VariableContext = nil
		if localctx != nil {
			t = localctx.(*VariableContext)
		}
		return p.Variable_Sempred(t, predIndex)

	case 15:
		var t *PatternContext = nil
		if localctx != nil {
			t = localctx.(*PatternContext)
		}
		return p.Pattern_Sempred(t, predIndex)

	case 55:
		var t *TypeSpecContext = nil
		if localctx != nil {
			t = localctx.(*TypeSpecContext)
		}
		return p.TypeSpec_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *Lua_grammar_antlr4Parser) Expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 7)

	case 1:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Lua_grammar_antlr4Parser) Variable_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 3:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Lua_grammar_antlr4Parser) Pattern_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 6:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Lua_grammar_antlr4Parser) TypeSpec_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 7:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
