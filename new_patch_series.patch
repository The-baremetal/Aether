From 01aca3c516e531d6765135a93ecdb8a92a04d6a1 Mon Sep 17 00:00:00 2001
From: luohoa97 <andysfruit021209@gmail.com>
Date: Thu, 8 May 2025 18:30:57 +1000
Subject: [PATCH 0/1] *** New patch ***

*** BLURB HERE ***

luohoa97 (1):
  license for lexer

 new_patch_series.patch    |  0
 patch.sh                  | 72 +++++++++++++++++++++++++++++++++++++++
 rootmaindirAETHER.proj    |  1 +
 sendpatch.sh              | 12 +++++++
 src/aether/lexer/lexer.go | 21 ++++++++++--
 5 files changed, 103 insertions(+), 3 deletions(-)
 create mode 100644 new_patch_series.patch
 create mode 100644 patch.sh
 create mode 100644 rootmaindirAETHER.proj
 create mode 100644 sendpatch.sh

-- 
2.34.1

From 01aca3c516e531d6765135a93ecdb8a92a04d6a1 Mon Sep 17 00:00:00 2001
From: luohoa97 <andysfruit021209@gmail.com>
Date: Thu, 8 May 2025 18:30:55 +1000
Subject: [PATCH 1/1] license for lexer

---
 new_patch_series.patch    |  0
 patch.sh                  | 72 +++++++++++++++++++++++++++++++++++++++
 rootmaindirAETHER.proj    |  1 +
 sendpatch.sh              | 12 +++++++
 src/aether/lexer/lexer.go | 21 ++++++++++--
 5 files changed, 103 insertions(+), 3 deletions(-)
 create mode 100644 new_patch_series.patch
 create mode 100644 patch.sh
 create mode 100644 rootmaindirAETHER.proj
 create mode 100644 sendpatch.sh

diff --git a/new_patch_series.patch b/new_patch_series.patch
new file mode 100644
index 0000000..e69de29
diff --git a/patch.sh b/patch.sh
new file mode 100644
index 0000000..36caadd
--- /dev/null
+++ b/patch.sh
@@ -0,0 +1,72 @@
+#!/bin/bash
+
+set -euo pipefail
+IFS=$'\n\t'
+
+if [[ ! -f "rootmaindirAETHER.proj" ]]; then
+  echo "🧨 Error: rootmaindirAETHER.proj not found in the current directory!"
+  exit 1
+fi
+
+current_branch=$(git symbolic-ref --short HEAD)
+if [[ "$current_branch" != "main" ]]; then
+  echo "🚨 You are currently on branch '$current_branch'."
+  read -p "🌱 Do you want to switch to 'main' before continuing? (y/n): " switch_answer
+  if [[ "$switch_answer" =~ ^[Yy]$ ]]; then
+    git checkout main
+  else
+    echo "🛑 Please switch to 'main' to generate patch series correctly."
+    exit 1
+  fi
+fi
+
+if ! git diff --quiet || ! git diff --cached --quiet; then
+  echo "⚠️ Warning: You have uncommitted changes."
+  read -p "💾 Do you want to commit them before proceeding with the rebase? (y/n): " commit_answer
+  if [[ "$commit_answer" =~ ^[Yy]$ ]]; then
+    echo "📦 Adding all files (including untracked)..."
+    git add -A
+    read -p "📝 Enter your commit message: " commit_msg
+    git commit -m "$commit_msg"
+  else
+    echo "🤔 You chose not to commit."
+    read -p "🧺 Do you want to stash your changes instead? (y/n): " stash_answer
+    if [[ "$stash_answer" =~ ^[Yy]$ ]]; then
+      echo "📦 Stashing your changes..."
+      git stash push -m "Pre-rebase stash"
+    else
+      echo "🛑 Please commit or stash your changes before proceeding."
+      exit 1
+    fi
+  fi
+fi
+
+echo "📡 Fetching latest changes from origin..."
+git fetch origin
+
+BASE_COMMIT=$(git merge-base HEAD origin/main)
+commits_ahead=$(git log "$BASE_COMMIT"..HEAD --oneline)
+
+if [[ -z "$commits_ahead" ]]; then
+  echo "✅ Your branch is up to date with no new commits to patch!"
+  exit 0
+fi
+
+echo "🔁 Rebasing on origin/main..."
+git rebase origin/main
+
+if git stash list | grep -q "Pre-rebase stash"; then
+  echo "📥 Applying stashed changes safely (with apply)..."
+  git stash apply
+  echo "🧹 If all looks good, run 'git stash drop' to remove it."
+fi
+
+echo "🧵 Generating patch series..."
+git format-patch "$BASE_COMMIT" --cover-letter --stdout > new_patch_series.patch
+
+if [[ ! -s new_patch_series.patch ]]; then
+  echo "📭 The patch series is empty. Nothing to save."
+  exit 0
+fi
+
+echo "🎉 Your patch series is ready: new_patch_series.patch"
diff --git a/rootmaindirAETHER.proj b/rootmaindirAETHER.proj
new file mode 100644
index 0000000..1eeac35
--- /dev/null
+++ b/rootmaindirAETHER.proj
@@ -0,0 +1 @@
+DO NOT DELETE THIS FILE, THIS FILE IS RESPONSIBLE FOR ALLOWING THE CHECK FOR ROOT DIRECTORY TO SUCCEED, WITHOUT IT, PATCH CREATING WILL FAIL.
\ No newline at end of file
diff --git a/sendpatch.sh b/sendpatch.sh
new file mode 100644
index 0000000..a3e1733
--- /dev/null
+++ b/sendpatch.sh
@@ -0,0 +1,12 @@
+#!/bin/bash
+
+set -euo pipefail
+IFS=$'\n\t'
+
+if [[ ! -f "new_patch_series.patch" ]]; then
+  echo "Error: Patch file 'new_patch_series.patch' not found!"
+  exit 1
+fi
+
+git send-email --to=9idli5v6u@mozmail.com new_patch_series.patch
+echo "Your patch has been sent to 9idli5v6u@mozmail.com"
diff --git a/src/aether/lexer/lexer.go b/src/aether/lexer/lexer.go
index e1de262..ece161c 100644
--- a/src/aether/lexer/lexer.go
+++ b/src/aether/lexer/lexer.go
@@ -1,7 +1,22 @@
-// this code is pretty self explainatory.
-
 package lexer
 
+// The lexer of AetherC
+
+/*
+This program is free software: you can redistribute it and/or modify
+it under the terms of the GNU Affero General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+This program is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+GNU Affero General Public License for more details.
+
+You should have received a copy of the GNU Affero General Public License
+along with this program. If not, see <https://www.gnu.org/licenses/>.
+*/
+
 import (
 	"strings"
 	"unicode"
@@ -256,4 +271,4 @@ func (l *Lexer) Tokenize() []Token {
 
 func isHexDigit(ch byte) bool {
     return (ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F')
-}
+}
\ No newline at end of file
-- 
2.34.1

